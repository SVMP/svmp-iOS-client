// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Svmp.pb.h"

@implementation SvmpRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SvmpRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL IntentActionIsValidValue(IntentAction value) {
  switch (value) {
    case IntentActionActionView:
    case IntentActionActionDial:
      return YES;
    default:
      return NO;
  }
}
BOOL SensorTypeIsValidValue(SensorType value) {
  switch (value) {
    case SensorTypeAccelerometer:
    case SensorTypeMagneticField:
    case SensorTypeOrientation:
    case SensorTypeGyroscope:
    case SensorTypeLight:
    case SensorTypePressure:
    case SensorTypeTemperature:
    case SensorTypeProximity:
    case SensorTypeGravity:
    case SensorTypeLinearAcceleration:
    case SensorTypeRotationVector:
    case SensorTypeRelativeHumidity:
    case SensorTypeAmbientTemperature:
      return YES;
    default:
      return NO;
  }
}
@interface Request ()
@property Request_RequestType type;
@property (strong) AuthRequest* authRequest;
@property (strong) VideoRequest* videoRequest;
@property (strong) TouchEvent* touch;
@property (strong) SensorEvent* sensor;
@property (strong) LocationRequest* locationRequest;
@property (strong) Intent* intent;
@property (strong) WebRTCMessage* webrtcMsg;
@property (strong) RotationInfo* rotationInfo;
@property (strong) Ping* pingRequest;
@end

@implementation Request

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasAuthRequest {
  return !!hasAuthRequest_;
}
- (void) setHasAuthRequest:(BOOL) value_ {
  hasAuthRequest_ = !!value_;
}
@synthesize authRequest;
- (BOOL) hasVideoRequest {
  return !!hasVideoRequest_;
}
- (void) setHasVideoRequest:(BOOL) value_ {
  hasVideoRequest_ = !!value_;
}
@synthesize videoRequest;
- (BOOL) hasTouch {
  return !!hasTouch_;
}
- (void) setHasTouch:(BOOL) value_ {
  hasTouch_ = !!value_;
}
@synthesize touch;
- (BOOL) hasSensor {
  return !!hasSensor_;
}
- (void) setHasSensor:(BOOL) value_ {
  hasSensor_ = !!value_;
}
@synthesize sensor;
- (BOOL) hasLocationRequest {
  return !!hasLocationRequest_;
}
- (void) setHasLocationRequest:(BOOL) value_ {
  hasLocationRequest_ = !!value_;
}
@synthesize locationRequest;
- (BOOL) hasIntent {
  return !!hasIntent_;
}
- (void) setHasIntent:(BOOL) value_ {
  hasIntent_ = !!value_;
}
@synthesize intent;
- (BOOL) hasWebrtcMsg {
  return !!hasWebrtcMsg_;
}
- (void) setHasWebrtcMsg:(BOOL) value_ {
  hasWebrtcMsg_ = !!value_;
}
@synthesize webrtcMsg;
- (BOOL) hasRotationInfo {
  return !!hasRotationInfo_;
}
- (void) setHasRotationInfo:(BOOL) value_ {
  hasRotationInfo_ = !!value_;
}
@synthesize rotationInfo;
- (BOOL) hasPingRequest {
  return !!hasPingRequest_;
}
- (void) setHasPingRequest:(BOOL) value_ {
  hasPingRequest_ = !!value_;
}
@synthesize pingRequest;
- (id) init {
  if ((self = [super init])) {
    self.type = Request_RequestTypeAuth;
    self.authRequest = [AuthRequest defaultInstance];
    self.videoRequest = [VideoRequest defaultInstance];
    self.touch = [TouchEvent defaultInstance];
    self.sensor = [SensorEvent defaultInstance];
    self.locationRequest = [LocationRequest defaultInstance];
    self.intent = [Intent defaultInstance];
    self.webrtcMsg = [WebRTCMessage defaultInstance];
    self.rotationInfo = [RotationInfo defaultInstance];
    self.pingRequest = [Ping defaultInstance];
  }
  return self;
}
static Request* defaultRequestInstance = nil;
+ (void) initialize {
  if (self == [Request class]) {
    defaultRequestInstance = [[Request alloc] init];
  }
}
+ (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasAuthRequest) {
    if (!self.authRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasVideoRequest) {
    if (!self.videoRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasTouch) {
    if (!self.touch.isInitialized) {
      return NO;
    }
  }
  if (self.hasSensor) {
    if (!self.sensor.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocationRequest) {
    if (!self.locationRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasIntent) {
    if (!self.intent.isInitialized) {
      return NO;
    }
  }
  if (self.hasRotationInfo) {
    if (!self.rotationInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasPingRequest) {
    if (!self.pingRequest.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasAuthRequest) {
    [output writeMessage:2 value:self.authRequest];
  }
  if (self.hasVideoRequest) {
    [output writeMessage:3 value:self.videoRequest];
  }
  if (self.hasTouch) {
    [output writeMessage:4 value:self.touch];
  }
  if (self.hasSensor) {
    [output writeMessage:5 value:self.sensor];
  }
  if (self.hasLocationRequest) {
    [output writeMessage:6 value:self.locationRequest];
  }
  if (self.hasIntent) {
    [output writeMessage:7 value:self.intent];
  }
  if (self.hasWebrtcMsg) {
    [output writeMessage:9 value:self.webrtcMsg];
  }
  if (self.hasRotationInfo) {
    [output writeMessage:10 value:self.rotationInfo];
  }
  if (self.hasPingRequest) {
    [output writeMessage:11 value:self.pingRequest];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasAuthRequest) {
    size_ += computeMessageSize(2, self.authRequest);
  }
  if (self.hasVideoRequest) {
    size_ += computeMessageSize(3, self.videoRequest);
  }
  if (self.hasTouch) {
    size_ += computeMessageSize(4, self.touch);
  }
  if (self.hasSensor) {
    size_ += computeMessageSize(5, self.sensor);
  }
  if (self.hasLocationRequest) {
    size_ += computeMessageSize(6, self.locationRequest);
  }
  if (self.hasIntent) {
    size_ += computeMessageSize(7, self.intent);
  }
  if (self.hasWebrtcMsg) {
    size_ += computeMessageSize(9, self.webrtcMsg);
  }
  if (self.hasRotationInfo) {
    size_ += computeMessageSize(10, self.rotationInfo);
  }
  if (self.hasPingRequest) {
    size_ += computeMessageSize(11, self.pingRequest);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Request*) parseFromData:(NSData*) data {
  return (Request*)[[[Request builder] mergeFromData:data] build];
}
+ (Request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input {
  return (Request*)[[[Request builder] mergeFromInputStream:input] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request_Builder*) builder {
  return [[Request_Builder alloc] init];
}
+ (Request_Builder*) builderWithPrototype:(Request*) prototype {
  return [[Request builder] mergeFrom:prototype];
}
- (Request_Builder*) builder {
  return [Request builder];
}
- (Request_Builder*) toBuilder {
  return [Request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasAuthRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"authRequest"];
    [self.authRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVideoRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"videoRequest"];
    [self.videoRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTouch) {
    [output appendFormat:@"%@%@ {\n", indent, @"touch"];
    [self.touch writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSensor) {
    [output appendFormat:@"%@%@ {\n", indent, @"sensor"];
    [self.sensor writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocationRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"locationRequest"];
    [self.locationRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIntent) {
    [output appendFormat:@"%@%@ {\n", indent, @"intent"];
    [self.intent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWebrtcMsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"webrtcMsg"];
    [self.webrtcMsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRotationInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"rotationInfo"];
    [self.rotationInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPingRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"pingRequest"];
    [self.pingRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasAuthRequest) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.authRequest storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"authRequest"];
  }
  if (self.hasVideoRequest) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.videoRequest storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"videoRequest"];
  }
  if (self.hasTouch) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.touch storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"touch"];
  }
  if (self.hasSensor) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.sensor storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sensor"];
  }
  if (self.hasLocationRequest) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.locationRequest storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"locationRequest"];
  }
  if (self.hasIntent) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.intent storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"intent"];
  }
  if (self.hasWebrtcMsg) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.webrtcMsg storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"webrtcMsg"];
  }
  if (self.hasRotationInfo) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.rotationInfo storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"rotationInfo"];
  }
  if (self.hasPingRequest) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.pingRequest storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pingRequest"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Request class]]) {
    return NO;
  }
  Request *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasAuthRequest == otherMessage.hasAuthRequest &&
      (!self.hasAuthRequest || [self.authRequest isEqual:otherMessage.authRequest]) &&
      self.hasVideoRequest == otherMessage.hasVideoRequest &&
      (!self.hasVideoRequest || [self.videoRequest isEqual:otherMessage.videoRequest]) &&
      self.hasTouch == otherMessage.hasTouch &&
      (!self.hasTouch || [self.touch isEqual:otherMessage.touch]) &&
      self.hasSensor == otherMessage.hasSensor &&
      (!self.hasSensor || [self.sensor isEqual:otherMessage.sensor]) &&
      self.hasLocationRequest == otherMessage.hasLocationRequest &&
      (!self.hasLocationRequest || [self.locationRequest isEqual:otherMessage.locationRequest]) &&
      self.hasIntent == otherMessage.hasIntent &&
      (!self.hasIntent || [self.intent isEqual:otherMessage.intent]) &&
      self.hasWebrtcMsg == otherMessage.hasWebrtcMsg &&
      (!self.hasWebrtcMsg || [self.webrtcMsg isEqual:otherMessage.webrtcMsg]) &&
      self.hasRotationInfo == otherMessage.hasRotationInfo &&
      (!self.hasRotationInfo || [self.rotationInfo isEqual:otherMessage.rotationInfo]) &&
      self.hasPingRequest == otherMessage.hasPingRequest &&
      (!self.hasPingRequest || [self.pingRequest isEqual:otherMessage.pingRequest]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasAuthRequest) {
    hashCode = hashCode * 31 + [self.authRequest hash];
  }
  if (self.hasVideoRequest) {
    hashCode = hashCode * 31 + [self.videoRequest hash];
  }
  if (self.hasTouch) {
    hashCode = hashCode * 31 + [self.touch hash];
  }
  if (self.hasSensor) {
    hashCode = hashCode * 31 + [self.sensor hash];
  }
  if (self.hasLocationRequest) {
    hashCode = hashCode * 31 + [self.locationRequest hash];
  }
  if (self.hasIntent) {
    hashCode = hashCode * 31 + [self.intent hash];
  }
  if (self.hasWebrtcMsg) {
    hashCode = hashCode * 31 + [self.webrtcMsg hash];
  }
  if (self.hasRotationInfo) {
    hashCode = hashCode * 31 + [self.rotationInfo hash];
  }
  if (self.hasPingRequest) {
    hashCode = hashCode * 31 + [self.pingRequest hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL Request_RequestTypeIsValidValue(Request_RequestType value) {
  switch (value) {
    case Request_RequestTypeAuth:
    case Request_RequestTypeVideoParams:
    case Request_RequestTypeTouchevent:
    case Request_RequestTypeSensorevent:
    case Request_RequestTypeLocation:
    case Request_RequestTypeIntent:
    case Request_RequestTypeScreeninfo:
    case Request_RequestTypeVideoStart:
    case Request_RequestTypeVideoStop:
    case Request_RequestTypeWebrtc:
    case Request_RequestTypeRotationInfo:
    case Request_RequestTypePing:
      return YES;
    default:
      return NO;
  }
}
@interface Request_Builder()
@property (strong) Request* result;
@end

@implementation Request_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Request_Builder*) clear {
  self.result = [[Request alloc] init];
  return self;
}
- (Request_Builder*) clone {
  return [Request builderWithPrototype:result];
}
- (Request*) defaultInstance {
  return [Request defaultInstance];
}
- (Request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Request*) buildPartial {
  Request* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Request_Builder*) mergeFrom:(Request*) other {
  if (other == [Request defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAuthRequest) {
    [self mergeAuthRequest:other.authRequest];
  }
  if (other.hasVideoRequest) {
    [self mergeVideoRequest:other.videoRequest];
  }
  if (other.hasTouch) {
    [self mergeTouch:other.touch];
  }
  if (other.hasSensor) {
    [self mergeSensor:other.sensor];
  }
  if (other.hasLocationRequest) {
    [self mergeLocationRequest:other.locationRequest];
  }
  if (other.hasIntent) {
    [self mergeIntent:other.intent];
  }
  if (other.hasWebrtcMsg) {
    [self mergeWebrtcMsg:other.webrtcMsg];
  }
  if (other.hasRotationInfo) {
    [self mergeRotationInfo:other.rotationInfo];
  }
  if (other.hasPingRequest) {
    [self mergePingRequest:other.pingRequest];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (Request_RequestTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        AuthRequest_Builder* subBuilder = [AuthRequest builder];
        if (self.hasAuthRequest) {
          [subBuilder mergeFrom:self.authRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthRequest:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        VideoRequest_Builder* subBuilder = [VideoRequest builder];
        if (self.hasVideoRequest) {
          [subBuilder mergeFrom:self.videoRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVideoRequest:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        TouchEvent_Builder* subBuilder = [TouchEvent builder];
        if (self.hasTouch) {
          [subBuilder mergeFrom:self.touch];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTouch:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SensorEvent_Builder* subBuilder = [SensorEvent builder];
        if (self.hasSensor) {
          [subBuilder mergeFrom:self.sensor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSensor:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        LocationRequest_Builder* subBuilder = [LocationRequest builder];
        if (self.hasLocationRequest) {
          [subBuilder mergeFrom:self.locationRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocationRequest:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Intent_Builder* subBuilder = [Intent builder];
        if (self.hasIntent) {
          [subBuilder mergeFrom:self.intent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIntent:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        WebRTCMessage_Builder* subBuilder = [WebRTCMessage builder];
        if (self.hasWebrtcMsg) {
          [subBuilder mergeFrom:self.webrtcMsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWebrtcMsg:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        RotationInfo_Builder* subBuilder = [RotationInfo builder];
        if (self.hasRotationInfo) {
          [subBuilder mergeFrom:self.rotationInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRotationInfo:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        Ping_Builder* subBuilder = [Ping builder];
        if (self.hasPingRequest) {
          [subBuilder mergeFrom:self.pingRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPingRequest:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (Request_RequestType) type {
  return result.type;
}
- (Request_Builder*) setType:(Request_RequestType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Request_Builder*) clearType {
  result.hasType = NO;
  result.type = Request_RequestTypeAuth;
  return self;
}
- (BOOL) hasAuthRequest {
  return result.hasAuthRequest;
}
- (AuthRequest*) authRequest {
  return result.authRequest;
}
- (Request_Builder*) setAuthRequest:(AuthRequest*) value {
  result.hasAuthRequest = YES;
  result.authRequest = value;
  return self;
}
- (Request_Builder*) setAuthRequestBuilder:(AuthRequest_Builder*) builderForValue {
  return [self setAuthRequest:[builderForValue build]];
}
- (Request_Builder*) mergeAuthRequest:(AuthRequest*) value {
  if (result.hasAuthRequest &&
      result.authRequest != [AuthRequest defaultInstance]) {
    result.authRequest =
      [[[AuthRequest builderWithPrototype:result.authRequest] mergeFrom:value] buildPartial];
  } else {
    result.authRequest = value;
  }
  result.hasAuthRequest = YES;
  return self;
}
- (Request_Builder*) clearAuthRequest {
  result.hasAuthRequest = NO;
  result.authRequest = [AuthRequest defaultInstance];
  return self;
}
- (BOOL) hasVideoRequest {
  return result.hasVideoRequest;
}
- (VideoRequest*) videoRequest {
  return result.videoRequest;
}
- (Request_Builder*) setVideoRequest:(VideoRequest*) value {
  result.hasVideoRequest = YES;
  result.videoRequest = value;
  return self;
}
- (Request_Builder*) setVideoRequestBuilder:(VideoRequest_Builder*) builderForValue {
  return [self setVideoRequest:[builderForValue build]];
}
- (Request_Builder*) mergeVideoRequest:(VideoRequest*) value {
  if (result.hasVideoRequest &&
      result.videoRequest != [VideoRequest defaultInstance]) {
    result.videoRequest =
      [[[VideoRequest builderWithPrototype:result.videoRequest] mergeFrom:value] buildPartial];
  } else {
    result.videoRequest = value;
  }
  result.hasVideoRequest = YES;
  return self;
}
- (Request_Builder*) clearVideoRequest {
  result.hasVideoRequest = NO;
  result.videoRequest = [VideoRequest defaultInstance];
  return self;
}
- (BOOL) hasTouch {
  return result.hasTouch;
}
- (TouchEvent*) touch {
  return result.touch;
}
- (Request_Builder*) setTouch:(TouchEvent*) value {
  result.hasTouch = YES;
  result.touch = value;
  return self;
}
- (Request_Builder*) setTouchBuilder:(TouchEvent_Builder*) builderForValue {
  return [self setTouch:[builderForValue build]];
}
- (Request_Builder*) mergeTouch:(TouchEvent*) value {
  if (result.hasTouch &&
      result.touch != [TouchEvent defaultInstance]) {
    result.touch =
      [[[TouchEvent builderWithPrototype:result.touch] mergeFrom:value] buildPartial];
  } else {
    result.touch = value;
  }
  result.hasTouch = YES;
  return self;
}
- (Request_Builder*) clearTouch {
  result.hasTouch = NO;
  result.touch = [TouchEvent defaultInstance];
  return self;
}
- (BOOL) hasSensor {
  return result.hasSensor;
}
- (SensorEvent*) sensor {
  return result.sensor;
}
- (Request_Builder*) setSensor:(SensorEvent*) value {
  result.hasSensor = YES;
  result.sensor = value;
  return self;
}
- (Request_Builder*) setSensorBuilder:(SensorEvent_Builder*) builderForValue {
  return [self setSensor:[builderForValue build]];
}
- (Request_Builder*) mergeSensor:(SensorEvent*) value {
  if (result.hasSensor &&
      result.sensor != [SensorEvent defaultInstance]) {
    result.sensor =
      [[[SensorEvent builderWithPrototype:result.sensor] mergeFrom:value] buildPartial];
  } else {
    result.sensor = value;
  }
  result.hasSensor = YES;
  return self;
}
- (Request_Builder*) clearSensor {
  result.hasSensor = NO;
  result.sensor = [SensorEvent defaultInstance];
  return self;
}
- (BOOL) hasLocationRequest {
  return result.hasLocationRequest;
}
- (LocationRequest*) locationRequest {
  return result.locationRequest;
}
- (Request_Builder*) setLocationRequest:(LocationRequest*) value {
  result.hasLocationRequest = YES;
  result.locationRequest = value;
  return self;
}
- (Request_Builder*) setLocationRequestBuilder:(LocationRequest_Builder*) builderForValue {
  return [self setLocationRequest:[builderForValue build]];
}
- (Request_Builder*) mergeLocationRequest:(LocationRequest*) value {
  if (result.hasLocationRequest &&
      result.locationRequest != [LocationRequest defaultInstance]) {
    result.locationRequest =
      [[[LocationRequest builderWithPrototype:result.locationRequest] mergeFrom:value] buildPartial];
  } else {
    result.locationRequest = value;
  }
  result.hasLocationRequest = YES;
  return self;
}
- (Request_Builder*) clearLocationRequest {
  result.hasLocationRequest = NO;
  result.locationRequest = [LocationRequest defaultInstance];
  return self;
}
- (BOOL) hasIntent {
  return result.hasIntent;
}
- (Intent*) intent {
  return result.intent;
}
- (Request_Builder*) setIntent:(Intent*) value {
  result.hasIntent = YES;
  result.intent = value;
  return self;
}
- (Request_Builder*) setIntentBuilder:(Intent_Builder*) builderForValue {
  return [self setIntent:[builderForValue build]];
}
- (Request_Builder*) mergeIntent:(Intent*) value {
  if (result.hasIntent &&
      result.intent != [Intent defaultInstance]) {
    result.intent =
      [[[Intent builderWithPrototype:result.intent] mergeFrom:value] buildPartial];
  } else {
    result.intent = value;
  }
  result.hasIntent = YES;
  return self;
}
- (Request_Builder*) clearIntent {
  result.hasIntent = NO;
  result.intent = [Intent defaultInstance];
  return self;
}
- (BOOL) hasWebrtcMsg {
  return result.hasWebrtcMsg;
}
- (WebRTCMessage*) webrtcMsg {
  return result.webrtcMsg;
}
- (Request_Builder*) setWebrtcMsg:(WebRTCMessage*) value {
  result.hasWebrtcMsg = YES;
  result.webrtcMsg = value;
  return self;
}
- (Request_Builder*) setWebrtcMsgBuilder:(WebRTCMessage_Builder*) builderForValue {
  return [self setWebrtcMsg:[builderForValue build]];
}
- (Request_Builder*) mergeWebrtcMsg:(WebRTCMessage*) value {
  if (result.hasWebrtcMsg &&
      result.webrtcMsg != [WebRTCMessage defaultInstance]) {
    result.webrtcMsg =
      [[[WebRTCMessage builderWithPrototype:result.webrtcMsg] mergeFrom:value] buildPartial];
  } else {
    result.webrtcMsg = value;
  }
  result.hasWebrtcMsg = YES;
  return self;
}
- (Request_Builder*) clearWebrtcMsg {
  result.hasWebrtcMsg = NO;
  result.webrtcMsg = [WebRTCMessage defaultInstance];
  return self;
}
- (BOOL) hasRotationInfo {
  return result.hasRotationInfo;
}
- (RotationInfo*) rotationInfo {
  return result.rotationInfo;
}
- (Request_Builder*) setRotationInfo:(RotationInfo*) value {
  result.hasRotationInfo = YES;
  result.rotationInfo = value;
  return self;
}
- (Request_Builder*) setRotationInfoBuilder:(RotationInfo_Builder*) builderForValue {
  return [self setRotationInfo:[builderForValue build]];
}
- (Request_Builder*) mergeRotationInfo:(RotationInfo*) value {
  if (result.hasRotationInfo &&
      result.rotationInfo != [RotationInfo defaultInstance]) {
    result.rotationInfo =
      [[[RotationInfo builderWithPrototype:result.rotationInfo] mergeFrom:value] buildPartial];
  } else {
    result.rotationInfo = value;
  }
  result.hasRotationInfo = YES;
  return self;
}
- (Request_Builder*) clearRotationInfo {
  result.hasRotationInfo = NO;
  result.rotationInfo = [RotationInfo defaultInstance];
  return self;
}
- (BOOL) hasPingRequest {
  return result.hasPingRequest;
}
- (Ping*) pingRequest {
  return result.pingRequest;
}
- (Request_Builder*) setPingRequest:(Ping*) value {
  result.hasPingRequest = YES;
  result.pingRequest = value;
  return self;
}
- (Request_Builder*) setPingRequestBuilder:(Ping_Builder*) builderForValue {
  return [self setPingRequest:[builderForValue build]];
}
- (Request_Builder*) mergePingRequest:(Ping*) value {
  if (result.hasPingRequest &&
      result.pingRequest != [Ping defaultInstance]) {
    result.pingRequest =
      [[[Ping builderWithPrototype:result.pingRequest] mergeFrom:value] buildPartial];
  } else {
    result.pingRequest = value;
  }
  result.hasPingRequest = YES;
  return self;
}
- (Request_Builder*) clearPingRequest {
  result.hasPingRequest = NO;
  result.pingRequest = [Ping defaultInstance];
  return self;
}
@end

@interface Response ()
@property Response_ResponseType type;
@property (strong) NSString* message;
@property (strong) AuthResponse* authResponse;
@property (strong) Intent* intent;
@property (strong) Notification* notification;
@property (strong) LocationResponse* locationResponse;
@property (strong) Ping* pingResponse;
@property (strong) ScreenInfo* screenInfo;
@property (strong) VideoStreamInfo* videoInfo;
@property (strong) WebRTCMessage* webrtcMsg;
@end

@implementation Response

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value_ {
  hasMessage_ = !!value_;
}
@synthesize message;
- (BOOL) hasAuthResponse {
  return !!hasAuthResponse_;
}
- (void) setHasAuthResponse:(BOOL) value_ {
  hasAuthResponse_ = !!value_;
}
@synthesize authResponse;
- (BOOL) hasIntent {
  return !!hasIntent_;
}
- (void) setHasIntent:(BOOL) value_ {
  hasIntent_ = !!value_;
}
@synthesize intent;
- (BOOL) hasNotification {
  return !!hasNotification_;
}
- (void) setHasNotification:(BOOL) value_ {
  hasNotification_ = !!value_;
}
@synthesize notification;
- (BOOL) hasLocationResponse {
  return !!hasLocationResponse_;
}
- (void) setHasLocationResponse:(BOOL) value_ {
  hasLocationResponse_ = !!value_;
}
@synthesize locationResponse;
- (BOOL) hasPingResponse {
  return !!hasPingResponse_;
}
- (void) setHasPingResponse:(BOOL) value_ {
  hasPingResponse_ = !!value_;
}
@synthesize pingResponse;
- (BOOL) hasScreenInfo {
  return !!hasScreenInfo_;
}
- (void) setHasScreenInfo:(BOOL) value_ {
  hasScreenInfo_ = !!value_;
}
@synthesize screenInfo;
- (BOOL) hasVideoInfo {
  return !!hasVideoInfo_;
}
- (void) setHasVideoInfo:(BOOL) value_ {
  hasVideoInfo_ = !!value_;
}
@synthesize videoInfo;
- (BOOL) hasWebrtcMsg {
  return !!hasWebrtcMsg_;
}
- (void) setHasWebrtcMsg:(BOOL) value_ {
  hasWebrtcMsg_ = !!value_;
}
@synthesize webrtcMsg;
- (id) init {
  if ((self = [super init])) {
    self.type = Response_ResponseTypeError;
    self.message = @"";
    self.authResponse = [AuthResponse defaultInstance];
    self.intent = [Intent defaultInstance];
    self.notification = [Notification defaultInstance];
    self.locationResponse = [LocationResponse defaultInstance];
    self.pingResponse = [Ping defaultInstance];
    self.screenInfo = [ScreenInfo defaultInstance];
    self.videoInfo = [VideoStreamInfo defaultInstance];
    self.webrtcMsg = [WebRTCMessage defaultInstance];
  }
  return self;
}
static Response* defaultResponseInstance = nil;
+ (void) initialize {
  if (self == [Response class]) {
    defaultResponseInstance = [[Response alloc] init];
  }
}
+ (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasAuthResponse) {
    if (!self.authResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasIntent) {
    if (!self.intent.isInitialized) {
      return NO;
    }
  }
  if (self.hasNotification) {
    if (!self.notification.isInitialized) {
      return NO;
    }
  }
  if (self.hasLocationResponse) {
    if (!self.locationResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasPingResponse) {
    if (!self.pingResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasScreenInfo) {
    if (!self.screenInfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasMessage) {
    [output writeString:2 value:self.message];
  }
  if (self.hasAuthResponse) {
    [output writeMessage:3 value:self.authResponse];
  }
  if (self.hasIntent) {
    [output writeMessage:4 value:self.intent];
  }
  if (self.hasNotification) {
    [output writeMessage:5 value:self.notification];
  }
  if (self.hasLocationResponse) {
    [output writeMessage:6 value:self.locationResponse];
  }
  if (self.hasPingResponse) {
    [output writeMessage:7 value:self.pingResponse];
  }
  if (self.hasScreenInfo) {
    [output writeMessage:16 value:self.screenInfo];
  }
  if (self.hasVideoInfo) {
    [output writeMessage:17 value:self.videoInfo];
  }
  if (self.hasWebrtcMsg) {
    [output writeMessage:18 value:self.webrtcMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasMessage) {
    size_ += computeStringSize(2, self.message);
  }
  if (self.hasAuthResponse) {
    size_ += computeMessageSize(3, self.authResponse);
  }
  if (self.hasIntent) {
    size_ += computeMessageSize(4, self.intent);
  }
  if (self.hasNotification) {
    size_ += computeMessageSize(5, self.notification);
  }
  if (self.hasLocationResponse) {
    size_ += computeMessageSize(6, self.locationResponse);
  }
  if (self.hasPingResponse) {
    size_ += computeMessageSize(7, self.pingResponse);
  }
  if (self.hasScreenInfo) {
    size_ += computeMessageSize(16, self.screenInfo);
  }
  if (self.hasVideoInfo) {
    size_ += computeMessageSize(17, self.videoInfo);
  }
  if (self.hasWebrtcMsg) {
    size_ += computeMessageSize(18, self.webrtcMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Response*) parseFromData:(NSData*) data {
  return (Response*)[[[Response builder] mergeFromData:data] build];
}
+ (Response*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input {
  return (Response*)[[[Response builder] mergeFromInputStream:input] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response_Builder*) builder {
  return [[Response_Builder alloc] init];
}
+ (Response_Builder*) builderWithPrototype:(Response*) prototype {
  return [[Response builder] mergeFrom:prototype];
}
- (Response_Builder*) builder {
  return [Response builder];
}
- (Response_Builder*) toBuilder {
  return [Response builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasAuthResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"authResponse"];
    [self.authResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasIntent) {
    [output appendFormat:@"%@%@ {\n", indent, @"intent"];
    [self.intent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNotification) {
    [output appendFormat:@"%@%@ {\n", indent, @"notification"];
    [self.notification writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocationResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"locationResponse"];
    [self.locationResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPingResponse) {
    [output appendFormat:@"%@%@ {\n", indent, @"pingResponse"];
    [self.pingResponse writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasScreenInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"screenInfo"];
    [self.screenInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVideoInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"videoInfo"];
    [self.videoInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWebrtcMsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"webrtcMsg"];
    [self.webrtcMsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasAuthResponse) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.authResponse storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"authResponse"];
  }
  if (self.hasIntent) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.intent storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"intent"];
  }
  if (self.hasNotification) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.notification storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"notification"];
  }
  if (self.hasLocationResponse) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.locationResponse storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"locationResponse"];
  }
  if (self.hasPingResponse) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.pingResponse storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pingResponse"];
  }
  if (self.hasScreenInfo) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.screenInfo storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"screenInfo"];
  }
  if (self.hasVideoInfo) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.videoInfo storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"videoInfo"];
  }
  if (self.hasWebrtcMsg) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.webrtcMsg storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"webrtcMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasAuthResponse == otherMessage.hasAuthResponse &&
      (!self.hasAuthResponse || [self.authResponse isEqual:otherMessage.authResponse]) &&
      self.hasIntent == otherMessage.hasIntent &&
      (!self.hasIntent || [self.intent isEqual:otherMessage.intent]) &&
      self.hasNotification == otherMessage.hasNotification &&
      (!self.hasNotification || [self.notification isEqual:otherMessage.notification]) &&
      self.hasLocationResponse == otherMessage.hasLocationResponse &&
      (!self.hasLocationResponse || [self.locationResponse isEqual:otherMessage.locationResponse]) &&
      self.hasPingResponse == otherMessage.hasPingResponse &&
      (!self.hasPingResponse || [self.pingResponse isEqual:otherMessage.pingResponse]) &&
      self.hasScreenInfo == otherMessage.hasScreenInfo &&
      (!self.hasScreenInfo || [self.screenInfo isEqual:otherMessage.screenInfo]) &&
      self.hasVideoInfo == otherMessage.hasVideoInfo &&
      (!self.hasVideoInfo || [self.videoInfo isEqual:otherMessage.videoInfo]) &&
      self.hasWebrtcMsg == otherMessage.hasWebrtcMsg &&
      (!self.hasWebrtcMsg || [self.webrtcMsg isEqual:otherMessage.webrtcMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasAuthResponse) {
    hashCode = hashCode * 31 + [self.authResponse hash];
  }
  if (self.hasIntent) {
    hashCode = hashCode * 31 + [self.intent hash];
  }
  if (self.hasNotification) {
    hashCode = hashCode * 31 + [self.notification hash];
  }
  if (self.hasLocationResponse) {
    hashCode = hashCode * 31 + [self.locationResponse hash];
  }
  if (self.hasPingResponse) {
    hashCode = hashCode * 31 + [self.pingResponse hash];
  }
  if (self.hasScreenInfo) {
    hashCode = hashCode * 31 + [self.screenInfo hash];
  }
  if (self.hasVideoInfo) {
    hashCode = hashCode * 31 + [self.videoInfo hash];
  }
  if (self.hasWebrtcMsg) {
    hashCode = hashCode * 31 + [self.webrtcMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL Response_ResponseTypeIsValidValue(Response_ResponseType value) {
  switch (value) {
    case Response_ResponseTypeError:
    case Response_ResponseTypeAuth:
    case Response_ResponseTypeVmready:
    case Response_ResponseTypeScreeninfo:
    case Response_ResponseTypeVidstreaminfo:
    case Response_ResponseTypeIntent:
    case Response_ResponseTypeNotification:
    case Response_ResponseTypeLocation:
    case Response_ResponseTypeVideostart:
    case Response_ResponseTypeVideostop:
    case Response_ResponseTypeVideopause:
    case Response_ResponseTypeWebrtc:
    case Response_ResponseTypePing:
      return YES;
    default:
      return NO;
  }
}
@interface Response_Builder()
@property (strong) Response* result;
@end

@implementation Response_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Response alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Response_Builder*) clear {
  self.result = [[Response alloc] init];
  return self;
}
- (Response_Builder*) clone {
  return [Response builderWithPrototype:result];
}
- (Response*) defaultInstance {
  return [Response defaultInstance];
}
- (Response*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Response*) buildPartial {
  Response* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Response_Builder*) mergeFrom:(Response*) other {
  if (other == [Response defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasAuthResponse) {
    [self mergeAuthResponse:other.authResponse];
  }
  if (other.hasIntent) {
    [self mergeIntent:other.intent];
  }
  if (other.hasNotification) {
    [self mergeNotification:other.notification];
  }
  if (other.hasLocationResponse) {
    [self mergeLocationResponse:other.locationResponse];
  }
  if (other.hasPingResponse) {
    [self mergePingResponse:other.pingResponse];
  }
  if (other.hasScreenInfo) {
    [self mergeScreenInfo:other.screenInfo];
  }
  if (other.hasVideoInfo) {
    [self mergeVideoInfo:other.videoInfo];
  }
  if (other.hasWebrtcMsg) {
    [self mergeWebrtcMsg:other.webrtcMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (Response_ResponseTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setMessage:[input readString]];
        break;
      }
      case 26: {
        AuthResponse_Builder* subBuilder = [AuthResponse builder];
        if (self.hasAuthResponse) {
          [subBuilder mergeFrom:self.authResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthResponse:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        Intent_Builder* subBuilder = [Intent builder];
        if (self.hasIntent) {
          [subBuilder mergeFrom:self.intent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIntent:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Notification_Builder* subBuilder = [Notification builder];
        if (self.hasNotification) {
          [subBuilder mergeFrom:self.notification];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNotification:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        LocationResponse_Builder* subBuilder = [LocationResponse builder];
        if (self.hasLocationResponse) {
          [subBuilder mergeFrom:self.locationResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocationResponse:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Ping_Builder* subBuilder = [Ping builder];
        if (self.hasPingResponse) {
          [subBuilder mergeFrom:self.pingResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPingResponse:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        ScreenInfo_Builder* subBuilder = [ScreenInfo builder];
        if (self.hasScreenInfo) {
          [subBuilder mergeFrom:self.screenInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setScreenInfo:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        VideoStreamInfo_Builder* subBuilder = [VideoStreamInfo builder];
        if (self.hasVideoInfo) {
          [subBuilder mergeFrom:self.videoInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVideoInfo:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        WebRTCMessage_Builder* subBuilder = [WebRTCMessage builder];
        if (self.hasWebrtcMsg) {
          [subBuilder mergeFrom:self.webrtcMsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWebrtcMsg:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (Response_ResponseType) type {
  return result.type;
}
- (Response_Builder*) setType:(Response_ResponseType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Response_Builder*) clearType {
  result.hasType = NO;
  result.type = Response_ResponseTypeError;
  return self;
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (Response_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (Response_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
- (BOOL) hasAuthResponse {
  return result.hasAuthResponse;
}
- (AuthResponse*) authResponse {
  return result.authResponse;
}
- (Response_Builder*) setAuthResponse:(AuthResponse*) value {
  result.hasAuthResponse = YES;
  result.authResponse = value;
  return self;
}
- (Response_Builder*) setAuthResponseBuilder:(AuthResponse_Builder*) builderForValue {
  return [self setAuthResponse:[builderForValue build]];
}
- (Response_Builder*) mergeAuthResponse:(AuthResponse*) value {
  if (result.hasAuthResponse &&
      result.authResponse != [AuthResponse defaultInstance]) {
    result.authResponse =
      [[[AuthResponse builderWithPrototype:result.authResponse] mergeFrom:value] buildPartial];
  } else {
    result.authResponse = value;
  }
  result.hasAuthResponse = YES;
  return self;
}
- (Response_Builder*) clearAuthResponse {
  result.hasAuthResponse = NO;
  result.authResponse = [AuthResponse defaultInstance];
  return self;
}
- (BOOL) hasIntent {
  return result.hasIntent;
}
- (Intent*) intent {
  return result.intent;
}
- (Response_Builder*) setIntent:(Intent*) value {
  result.hasIntent = YES;
  result.intent = value;
  return self;
}
- (Response_Builder*) setIntentBuilder:(Intent_Builder*) builderForValue {
  return [self setIntent:[builderForValue build]];
}
- (Response_Builder*) mergeIntent:(Intent*) value {
  if (result.hasIntent &&
      result.intent != [Intent defaultInstance]) {
    result.intent =
      [[[Intent builderWithPrototype:result.intent] mergeFrom:value] buildPartial];
  } else {
    result.intent = value;
  }
  result.hasIntent = YES;
  return self;
}
- (Response_Builder*) clearIntent {
  result.hasIntent = NO;
  result.intent = [Intent defaultInstance];
  return self;
}
- (BOOL) hasNotification {
  return result.hasNotification;
}
- (Notification*) notification {
  return result.notification;
}
- (Response_Builder*) setNotification:(Notification*) value {
  result.hasNotification = YES;
  result.notification = value;
  return self;
}
- (Response_Builder*) setNotificationBuilder:(Notification_Builder*) builderForValue {
  return [self setNotification:[builderForValue build]];
}
- (Response_Builder*) mergeNotification:(Notification*) value {
  if (result.hasNotification &&
      result.notification != [Notification defaultInstance]) {
    result.notification =
      [[[Notification builderWithPrototype:result.notification] mergeFrom:value] buildPartial];
  } else {
    result.notification = value;
  }
  result.hasNotification = YES;
  return self;
}
- (Response_Builder*) clearNotification {
  result.hasNotification = NO;
  result.notification = [Notification defaultInstance];
  return self;
}
- (BOOL) hasLocationResponse {
  return result.hasLocationResponse;
}
- (LocationResponse*) locationResponse {
  return result.locationResponse;
}
- (Response_Builder*) setLocationResponse:(LocationResponse*) value {
  result.hasLocationResponse = YES;
  result.locationResponse = value;
  return self;
}
- (Response_Builder*) setLocationResponseBuilder:(LocationResponse_Builder*) builderForValue {
  return [self setLocationResponse:[builderForValue build]];
}
- (Response_Builder*) mergeLocationResponse:(LocationResponse*) value {
  if (result.hasLocationResponse &&
      result.locationResponse != [LocationResponse defaultInstance]) {
    result.locationResponse =
      [[[LocationResponse builderWithPrototype:result.locationResponse] mergeFrom:value] buildPartial];
  } else {
    result.locationResponse = value;
  }
  result.hasLocationResponse = YES;
  return self;
}
- (Response_Builder*) clearLocationResponse {
  result.hasLocationResponse = NO;
  result.locationResponse = [LocationResponse defaultInstance];
  return self;
}
- (BOOL) hasPingResponse {
  return result.hasPingResponse;
}
- (Ping*) pingResponse {
  return result.pingResponse;
}
- (Response_Builder*) setPingResponse:(Ping*) value {
  result.hasPingResponse = YES;
  result.pingResponse = value;
  return self;
}
- (Response_Builder*) setPingResponseBuilder:(Ping_Builder*) builderForValue {
  return [self setPingResponse:[builderForValue build]];
}
- (Response_Builder*) mergePingResponse:(Ping*) value {
  if (result.hasPingResponse &&
      result.pingResponse != [Ping defaultInstance]) {
    result.pingResponse =
      [[[Ping builderWithPrototype:result.pingResponse] mergeFrom:value] buildPartial];
  } else {
    result.pingResponse = value;
  }
  result.hasPingResponse = YES;
  return self;
}
- (Response_Builder*) clearPingResponse {
  result.hasPingResponse = NO;
  result.pingResponse = [Ping defaultInstance];
  return self;
}
- (BOOL) hasScreenInfo {
  return result.hasScreenInfo;
}
- (ScreenInfo*) screenInfo {
  return result.screenInfo;
}
- (Response_Builder*) setScreenInfo:(ScreenInfo*) value {
  result.hasScreenInfo = YES;
  result.screenInfo = value;
  return self;
}
- (Response_Builder*) setScreenInfoBuilder:(ScreenInfo_Builder*) builderForValue {
  return [self setScreenInfo:[builderForValue build]];
}
- (Response_Builder*) mergeScreenInfo:(ScreenInfo*) value {
  if (result.hasScreenInfo &&
      result.screenInfo != [ScreenInfo defaultInstance]) {
    result.screenInfo =
      [[[ScreenInfo builderWithPrototype:result.screenInfo] mergeFrom:value] buildPartial];
  } else {
    result.screenInfo = value;
  }
  result.hasScreenInfo = YES;
  return self;
}
- (Response_Builder*) clearScreenInfo {
  result.hasScreenInfo = NO;
  result.screenInfo = [ScreenInfo defaultInstance];
  return self;
}
- (BOOL) hasVideoInfo {
  return result.hasVideoInfo;
}
- (VideoStreamInfo*) videoInfo {
  return result.videoInfo;
}
- (Response_Builder*) setVideoInfo:(VideoStreamInfo*) value {
  result.hasVideoInfo = YES;
  result.videoInfo = value;
  return self;
}
- (Response_Builder*) setVideoInfoBuilder:(VideoStreamInfo_Builder*) builderForValue {
  return [self setVideoInfo:[builderForValue build]];
}
- (Response_Builder*) mergeVideoInfo:(VideoStreamInfo*) value {
  if (result.hasVideoInfo &&
      result.videoInfo != [VideoStreamInfo defaultInstance]) {
    result.videoInfo =
      [[[VideoStreamInfo builderWithPrototype:result.videoInfo] mergeFrom:value] buildPartial];
  } else {
    result.videoInfo = value;
  }
  result.hasVideoInfo = YES;
  return self;
}
- (Response_Builder*) clearVideoInfo {
  result.hasVideoInfo = NO;
  result.videoInfo = [VideoStreamInfo defaultInstance];
  return self;
}
- (BOOL) hasWebrtcMsg {
  return result.hasWebrtcMsg;
}
- (WebRTCMessage*) webrtcMsg {
  return result.webrtcMsg;
}
- (Response_Builder*) setWebrtcMsg:(WebRTCMessage*) value {
  result.hasWebrtcMsg = YES;
  result.webrtcMsg = value;
  return self;
}
- (Response_Builder*) setWebrtcMsgBuilder:(WebRTCMessage_Builder*) builderForValue {
  return [self setWebrtcMsg:[builderForValue build]];
}
- (Response_Builder*) mergeWebrtcMsg:(WebRTCMessage*) value {
  if (result.hasWebrtcMsg &&
      result.webrtcMsg != [WebRTCMessage defaultInstance]) {
    result.webrtcMsg =
      [[[WebRTCMessage builderWithPrototype:result.webrtcMsg] mergeFrom:value] buildPartial];
  } else {
    result.webrtcMsg = value;
  }
  result.hasWebrtcMsg = YES;
  return self;
}
- (Response_Builder*) clearWebrtcMsg {
  result.hasWebrtcMsg = NO;
  result.webrtcMsg = [WebRTCMessage defaultInstance];
  return self;
}
@end

@interface Intent ()
@property IntentAction action;
@property (strong) NSMutableArray * extrasArray;
@property (strong) NSString* data;
@property (strong) PBAppendableArray * flagsArray;
@property (strong) NSMutableArray * categoriesArray;
@end

@implementation Intent

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value_ {
  hasAction_ = !!value_;
}
@synthesize action;
@synthesize extrasArray;
@dynamic extras;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value_ {
  hasData_ = !!value_;
}
@synthesize data;
@synthesize flagsArray;
@dynamic flags;
@synthesize categoriesArray;
@dynamic categories;
- (id) init {
  if ((self = [super init])) {
    self.action = IntentActionActionView;
    self.data = @"";
  }
  return self;
}
static Intent* defaultIntentInstance = nil;
+ (void) initialize {
  if (self == [Intent class]) {
    defaultIntentInstance = [[Intent alloc] init];
  }
}
+ (Intent*) defaultInstance {
  return defaultIntentInstance;
}
- (Intent*) defaultInstance {
  return defaultIntentInstance;
}
- (NSArray *)extras {
  return extrasArray;
}
- (Intent_Tuple*)extrasAtIndex:(NSUInteger)index {
  return [extrasArray objectAtIndex:index];
}
- (PBArray *)flags {
  return flagsArray;
}
- (int32_t)flagsAtIndex:(NSUInteger)index {
  return [flagsArray int32AtIndex:index];
}
- (NSArray *)categories {
  return categoriesArray;
}
- (NSString*)categoriesAtIndex:(NSUInteger)index {
  return [categoriesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  for (Intent_Tuple* element in self.extras) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeEnum:1 value:self.action];
  }
  for (Intent_Tuple *element in self.extrasArray) {
    [output writeMessage:2 value:element];
  }
  if (self.hasData) {
    [output writeString:3 value:self.data];
  }
  const NSUInteger flagsArrayCount = self.flagsArray.count;
  if (flagsArrayCount > 0) {
    const int32_t *values = (const int32_t *)self.flagsArray.data;
    for (NSUInteger i = 0; i < flagsArrayCount; ++i) {
      [output writeInt32:4 value:values[i]];
    }
  }
  for (NSString *element in self.categoriesArray) {
    [output writeString:5 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAction) {
    size_ += computeEnumSize(1, self.action);
  }
  for (Intent_Tuple *element in self.extrasArray) {
    size_ += computeMessageSize(2, element);
  }
  if (self.hasData) {
    size_ += computeStringSize(3, self.data);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.flagsArray.count;
    const int32_t *values = (const int32_t *)self.flagsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.categoriesArray.count;
    for (NSString *element in self.categoriesArray) {
      dataSize += computeStringSizeNoTag(element);
    }
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Intent*) parseFromData:(NSData*) data {
  return (Intent*)[[[Intent builder] mergeFromData:data] build];
}
+ (Intent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent*)[[[Intent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Intent*) parseFromInputStream:(NSInputStream*) input {
  return (Intent*)[[[Intent builder] mergeFromInputStream:input] build];
}
+ (Intent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent*)[[[Intent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Intent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Intent*)[[[Intent builder] mergeFromCodedInputStream:input] build];
}
+ (Intent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent*)[[[Intent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Intent_Builder*) builder {
  return [[Intent_Builder alloc] init];
}
+ (Intent_Builder*) builderWithPrototype:(Intent*) prototype {
  return [[Intent builder] mergeFrom:prototype];
}
- (Intent_Builder*) builder {
  return [Intent builder];
}
- (Intent_Builder*) toBuilder {
  return [Intent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %d\n", indent, @"action", self.action];
  }
  for (Intent_Tuple* element in self.extrasArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"extras"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  NSUInteger flagsArrayCount=self.flagsArray.count;
  for(int i=0;i<flagsArrayCount;i++){
    [output appendFormat:@"%@%@: %d\n", indent, @"flags", [self.flagsArray int32AtIndex:i]];
  }
  for (NSString* element in self.categoriesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categories", element];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAction) {
    [dictionary setObject: @(self.action) forKey: @"action"];
  }
  for (Intent_Tuple* element in self.extrasArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey: @"extras"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  NSMutableArray * flagsArrayArray = [NSMutableArray new];
  NSUInteger flagsArrayCount=self.flagsArray.count;
  for(int i=0;i<flagsArrayCount;i++){
      //** SVMP fix and workaround
      [flagsArrayArray addObject: @([self.flagsArray int32AtIndex:i])]; // forKey: @"flags"];
  }
  [dictionary setObject: flagsArrayArray forKey: @"flags"];
  //** SVMP code fixes
#if 0
  for (NSString* element in self.categoriesArray) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categories", element];
  }
#endif
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Intent class]]) {
    return NO;
  }
  Intent *otherMessage = other;
  return
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || self.action == otherMessage.action) &&
      [self.extrasArray isEqualToArray:otherMessage.extrasArray] &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      [self.flagsArray isEqualToArray:otherMessage.flagsArray] &&
      [self.categoriesArray isEqualToArray:otherMessage.categoriesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAction) {
    hashCode = hashCode * 31 + self.action;
  }
  for (Intent_Tuple* element in self.extrasArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  NSUInteger flagsArrayCount=self.flagsArray.count;
  for(int i=0;i<flagsArrayCount;i++){
  hashCode = hashCode * 31 + [self.flagsArray int32AtIndex:i];
  }
  for (NSString* element in self.categoriesArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Intent_Tuple ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation Intent_Tuple

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) value_ {
  hasKey_ = !!value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
  hasValue_ = !!value_;
}
@synthesize value;
- (id) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static Intent_Tuple* defaultIntent_TupleInstance = nil;
+ (void) initialize {
  if (self == [Intent_Tuple class]) {
    defaultIntent_TupleInstance = [[Intent_Tuple alloc] init];
  }
}
+ (Intent_Tuple*) defaultInstance {
  return defaultIntent_TupleInstance;
}
- (Intent_Tuple*) defaultInstance {
  return defaultIntent_TupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Intent_Tuple*) parseFromData:(NSData*) data {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromData:data] build];
}
+ (Intent_Tuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Intent_Tuple*) parseFromInputStream:(NSInputStream*) input {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromInputStream:input] build];
}
+ (Intent_Tuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Intent_Tuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromCodedInputStream:input] build];
}
+ (Intent_Tuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Intent_Tuple*)[[[Intent_Tuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Intent_Tuple_Builder*) builder {
  return [[Intent_Tuple_Builder alloc] init];
}
+ (Intent_Tuple_Builder*) builderWithPrototype:(Intent_Tuple*) prototype {
  return [[Intent_Tuple builder] mergeFrom:prototype];
}
- (Intent_Tuple_Builder*) builder {
  return [Intent_Tuple builder];
}
- (Intent_Tuple_Builder*) toBuilder {
  return [Intent_Tuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Intent_Tuple class]]) {
    return NO;
  }
  Intent_Tuple *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Intent_Tuple_Builder()
@property (strong) Intent_Tuple* result;
@end

@implementation Intent_Tuple_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Intent_Tuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Intent_Tuple_Builder*) clear {
  self.result = [[Intent_Tuple alloc] init];
  return self;
}
- (Intent_Tuple_Builder*) clone {
  return [Intent_Tuple builderWithPrototype:result];
}
- (Intent_Tuple*) defaultInstance {
  return [Intent_Tuple defaultInstance];
}
- (Intent_Tuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Intent_Tuple*) buildPartial {
  Intent_Tuple* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Intent_Tuple_Builder*) mergeFrom:(Intent_Tuple*) other {
  if (other == [Intent_Tuple defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Intent_Tuple_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Intent_Tuple_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return result.hasKey;
}
- (NSString*) key {
  return result.key;
}
- (Intent_Tuple_Builder*) setKey:(NSString*) value {
  result.hasKey = YES;
  result.key = value;
  return self;
}
- (Intent_Tuple_Builder*) clearKey {
  result.hasKey = NO;
  result.key = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (Intent_Tuple_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (Intent_Tuple_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface Intent_Builder()
@property (strong) Intent* result;
@end

@implementation Intent_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Intent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Intent_Builder*) clear {
  self.result = [[Intent alloc] init];
  return self;
}
- (Intent_Builder*) clone {
  return [Intent builderWithPrototype:result];
}
- (Intent*) defaultInstance {
  return [Intent defaultInstance];
}
- (Intent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Intent*) buildPartial {
  Intent* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Intent_Builder*) mergeFrom:(Intent*) other {
  if (other == [Intent defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  if (other.extrasArray.count > 0) {
    if (result.extrasArray == nil) {
      result.extrasArray = [[NSMutableArray alloc] initWithArray:other.extrasArray];
    } else {
      [result.extrasArray addObjectsFromArray:other.extrasArray];
    }
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.flagsArray.count > 0) {
    if (result.flagsArray == nil) {
      result.flagsArray = [other.flagsArray copy];
    } else {
      [result.flagsArray appendArray:other.flagsArray];
    }
  }
  if (other.categoriesArray.count > 0) {
    if (result.categoriesArray == nil) {
      result.categoriesArray = [[NSMutableArray alloc] initWithArray:other.categoriesArray];
    } else {
      [result.categoriesArray addObjectsFromArray:other.categoriesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Intent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Intent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (IntentActionIsValidValue(value)) {
          [self setAction:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        Intent_Tuple_Builder* subBuilder = [Intent_Tuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExtras:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setData:[input readString]];
        break;
      }
      case 32: {
        [self addFlags:[input readInt32]];
        break;
      }
      case 42: {
        [self addCategories:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (IntentAction) action {
  return result.action;
}
- (Intent_Builder*) setAction:(IntentAction) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (Intent_Builder*) clearAction {
  result.hasAction = NO;
  result.action = IntentActionActionView;
  return self;
}
- (NSMutableArray *)extras {
  return result.extrasArray;
}
- (Intent_Tuple*)extrasAtIndex:(NSUInteger)index {
  return [result extrasAtIndex:index];
}
- (Intent_Builder *)addExtras:(Intent_Tuple*)value {
  if (result.extrasArray == nil) {
    result.extrasArray = [[NSMutableArray alloc]init];
  }
  [result.extrasArray addObject:value];
  return self;
}
- (Intent_Builder *)setExtrasArray:(NSArray *)array {
  result.extrasArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (Intent_Builder *)clearExtras {
  result.extrasArray = nil;
  return self;
}
- (BOOL) hasData {
  return result.hasData;
}
- (NSString*) data {
  return result.data;
}
- (Intent_Builder*) setData:(NSString*) value {
  result.hasData = YES;
  result.data = value;
  return self;
}
- (Intent_Builder*) clearData {
  result.hasData = NO;
  result.data = @"";
  return self;
}
- (PBAppendableArray *)flags {
  return result.flagsArray;
}
- (int32_t)flagsAtIndex:(NSUInteger)index {
  return [result flagsAtIndex:index];
}
- (Intent_Builder *)addFlags:(int32_t)value {
  if (result.flagsArray == nil) {
    result.flagsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.flagsArray addInt32:value];
  return self;
}
- (Intent_Builder *)setFlagsArray:(NSArray *)array {
  result.flagsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (Intent_Builder *)setFlagsValues:(const int32_t *)values count:(NSUInteger)count {
  result.flagsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (Intent_Builder *)clearFlags {
  result.flagsArray = nil;
  return self;
}
- (NSMutableArray *)categories {
  return result.categoriesArray;
}
- (NSString*)categoriesAtIndex:(NSUInteger)index {
  return [result categoriesAtIndex:index];
}
- (Intent_Builder *)addCategories:(NSString*)value {
  if (result.categoriesArray == nil) {
    result.categoriesArray = [[NSMutableArray alloc]init];
  }
  [result.categoriesArray addObject:value];
  return self;
}
- (Intent_Builder *)setCategoriesArray:(NSArray *)array {
  result.categoriesArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (Intent_Builder *)clearCategories {
  result.categoriesArray = nil;
  return self;
}
@end

@interface Notification ()
@property (strong) NSString* contentTitle;
@property (strong) NSString* contentText;
@property (strong) NSData* smallIcon;
@property (strong) NSData* largeIcon;
@end

@implementation Notification

- (BOOL) hasContentTitle {
  return !!hasContentTitle_;
}
- (void) setHasContentTitle:(BOOL) value_ {
  hasContentTitle_ = !!value_;
}
@synthesize contentTitle;
- (BOOL) hasContentText {
  return !!hasContentText_;
}
- (void) setHasContentText:(BOOL) value_ {
  hasContentText_ = !!value_;
}
@synthesize contentText;
- (BOOL) hasSmallIcon {
  return !!hasSmallIcon_;
}
- (void) setHasSmallIcon:(BOOL) value_ {
  hasSmallIcon_ = !!value_;
}
@synthesize smallIcon;
- (BOOL) hasLargeIcon {
  return !!hasLargeIcon_;
}
- (void) setHasLargeIcon:(BOOL) value_ {
  hasLargeIcon_ = !!value_;
}
@synthesize largeIcon;
- (id) init {
  if ((self = [super init])) {
    self.contentTitle = @"";
    self.contentText = @"";
    self.smallIcon = [NSData data];
    self.largeIcon = [NSData data];
  }
  return self;
}
static Notification* defaultNotificationInstance = nil;
+ (void) initialize {
  if (self == [Notification class]) {
    defaultNotificationInstance = [[Notification alloc] init];
  }
}
+ (Notification*) defaultInstance {
  return defaultNotificationInstance;
}
- (Notification*) defaultInstance {
  return defaultNotificationInstance;
}
- (BOOL) isInitialized {
  if (!self.hasContentTitle) {
    return NO;
  }
  if (!self.hasContentText) {
    return NO;
  }
  if (!self.hasSmallIcon) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasContentTitle) {
    [output writeString:1 value:self.contentTitle];
  }
  if (self.hasContentText) {
    [output writeString:2 value:self.contentText];
  }
  if (self.hasSmallIcon) {
    [output writeData:3 value:self.smallIcon];
  }
  if (self.hasLargeIcon) {
    [output writeData:4 value:self.largeIcon];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasContentTitle) {
    size_ += computeStringSize(1, self.contentTitle);
  }
  if (self.hasContentText) {
    size_ += computeStringSize(2, self.contentText);
  }
  if (self.hasSmallIcon) {
    size_ += computeDataSize(3, self.smallIcon);
  }
  if (self.hasLargeIcon) {
    size_ += computeDataSize(4, self.largeIcon);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Notification*) parseFromData:(NSData*) data {
  return (Notification*)[[[Notification builder] mergeFromData:data] build];
}
+ (Notification*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Notification*)[[[Notification builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Notification*) parseFromInputStream:(NSInputStream*) input {
  return (Notification*)[[[Notification builder] mergeFromInputStream:input] build];
}
+ (Notification*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Notification*)[[[Notification builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Notification*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Notification*)[[[Notification builder] mergeFromCodedInputStream:input] build];
}
+ (Notification*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Notification*)[[[Notification builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Notification_Builder*) builder {
  return [[Notification_Builder alloc] init];
}
+ (Notification_Builder*) builderWithPrototype:(Notification*) prototype {
  return [[Notification builder] mergeFrom:prototype];
}
- (Notification_Builder*) builder {
  return [Notification builder];
}
- (Notification_Builder*) toBuilder {
  return [Notification builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasContentTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentTitle", self.contentTitle];
  }
  if (self.hasContentText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentText", self.contentText];
  }
  if (self.hasSmallIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"smallIcon", self.smallIcon];
  }
  if (self.hasLargeIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"largeIcon", self.largeIcon];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasContentTitle) {
    [dictionary setObject: self.contentTitle forKey: @"contentTitle"];
  }
  if (self.hasContentText) {
    [dictionary setObject: self.contentText forKey: @"contentText"];
  }
  if (self.hasSmallIcon) {
    [dictionary setObject: self.smallIcon forKey: @"smallIcon"];
  }
  if (self.hasLargeIcon) {
    [dictionary setObject: self.largeIcon forKey: @"largeIcon"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Notification class]]) {
    return NO;
  }
  Notification *otherMessage = other;
  return
      self.hasContentTitle == otherMessage.hasContentTitle &&
      (!self.hasContentTitle || [self.contentTitle isEqual:otherMessage.contentTitle]) &&
      self.hasContentText == otherMessage.hasContentText &&
      (!self.hasContentText || [self.contentText isEqual:otherMessage.contentText]) &&
      self.hasSmallIcon == otherMessage.hasSmallIcon &&
      (!self.hasSmallIcon || [self.smallIcon isEqual:otherMessage.smallIcon]) &&
      self.hasLargeIcon == otherMessage.hasLargeIcon &&
      (!self.hasLargeIcon || [self.largeIcon isEqual:otherMessage.largeIcon]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasContentTitle) {
    hashCode = hashCode * 31 + [self.contentTitle hash];
  }
  if (self.hasContentText) {
    hashCode = hashCode * 31 + [self.contentText hash];
  }
  if (self.hasSmallIcon) {
    hashCode = hashCode * 31 + [self.smallIcon hash];
  }
  if (self.hasLargeIcon) {
    hashCode = hashCode * 31 + [self.largeIcon hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Notification_Builder()
@property (strong) Notification* result;
@end

@implementation Notification_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Notification alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Notification_Builder*) clear {
  self.result = [[Notification alloc] init];
  return self;
}
- (Notification_Builder*) clone {
  return [Notification builderWithPrototype:result];
}
- (Notification*) defaultInstance {
  return [Notification defaultInstance];
}
- (Notification*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Notification*) buildPartial {
  Notification* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Notification_Builder*) mergeFrom:(Notification*) other {
  if (other == [Notification defaultInstance]) {
    return self;
  }
  if (other.hasContentTitle) {
    [self setContentTitle:other.contentTitle];
  }
  if (other.hasContentText) {
    [self setContentText:other.contentText];
  }
  if (other.hasSmallIcon) {
    [self setSmallIcon:other.smallIcon];
  }
  if (other.hasLargeIcon) {
    [self setLargeIcon:other.largeIcon];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Notification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Notification_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setContentTitle:[input readString]];
        break;
      }
      case 18: {
        [self setContentText:[input readString]];
        break;
      }
      case 26: {
        [self setSmallIcon:[input readData]];
        break;
      }
      case 34: {
        [self setLargeIcon:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasContentTitle {
  return result.hasContentTitle;
}
- (NSString*) contentTitle {
  return result.contentTitle;
}
- (Notification_Builder*) setContentTitle:(NSString*) value {
  result.hasContentTitle = YES;
  result.contentTitle = value;
  return self;
}
- (Notification_Builder*) clearContentTitle {
  result.hasContentTitle = NO;
  result.contentTitle = @"";
  return self;
}
- (BOOL) hasContentText {
  return result.hasContentText;
}
- (NSString*) contentText {
  return result.contentText;
}
- (Notification_Builder*) setContentText:(NSString*) value {
  result.hasContentText = YES;
  result.contentText = value;
  return self;
}
- (Notification_Builder*) clearContentText {
  result.hasContentText = NO;
  result.contentText = @"";
  return self;
}
- (BOOL) hasSmallIcon {
  return result.hasSmallIcon;
}
- (NSData*) smallIcon {
  return result.smallIcon;
}
- (Notification_Builder*) setSmallIcon:(NSData*) value {
  result.hasSmallIcon = YES;
  result.smallIcon = value;
  return self;
}
- (Notification_Builder*) clearSmallIcon {
  result.hasSmallIcon = NO;
  result.smallIcon = [NSData data];
  return self;
}
- (BOOL) hasLargeIcon {
  return result.hasLargeIcon;
}
- (NSData*) largeIcon {
  return result.largeIcon;
}
- (Notification_Builder*) setLargeIcon:(NSData*) value {
  result.hasLargeIcon = YES;
  result.largeIcon = value;
  return self;
}
- (Notification_Builder*) clearLargeIcon {
  result.hasLargeIcon = NO;
  result.largeIcon = [NSData data];
  return self;
}
@end

@interface TouchEvent ()
@property int32_t action;
@property (strong) NSMutableArray * itemsArray;
@end

@implementation TouchEvent

- (BOOL) hasAction {
  return !!hasAction_;
}
- (void) setHasAction:(BOOL) value_ {
  hasAction_ = !!value_;
}
@synthesize action;
@synthesize itemsArray;
@dynamic items;
- (id) init {
  if ((self = [super init])) {
    self.action = 0;
  }
  return self;
}
static TouchEvent* defaultTouchEventInstance = nil;
+ (void) initialize {
  if (self == [TouchEvent class]) {
    defaultTouchEventInstance = [[TouchEvent alloc] init];
  }
}
+ (TouchEvent*) defaultInstance {
  return defaultTouchEventInstance;
}
- (TouchEvent*) defaultInstance {
  return defaultTouchEventInstance;
}
- (NSArray *)items {
  return itemsArray;
}
- (TouchEvent_PointerCoords*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAction) {
    return NO;
  }
  for (TouchEvent_PointerCoords* element in self.items) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAction) {
    [output writeInt32:1 value:self.action];
  }
  for (TouchEvent_PointerCoords *element in self.itemsArray) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAction) {
    size_ += computeInt32Size(1, self.action);
  }
  for (TouchEvent_PointerCoords *element in self.itemsArray) {
    size_ += computeMessageSize(2, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TouchEvent*) parseFromData:(NSData*) data {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromData:data] build];
}
+ (TouchEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent*) parseFromInputStream:(NSInputStream*) input {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromInputStream:input] build];
}
+ (TouchEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromCodedInputStream:input] build];
}
+ (TouchEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent*)[[[TouchEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent_Builder*) builder {
  return [[TouchEvent_Builder alloc] init];
}
+ (TouchEvent_Builder*) builderWithPrototype:(TouchEvent*) prototype {
  return [[TouchEvent builder] mergeFrom:prototype];
}
- (TouchEvent_Builder*) builder {
  return [TouchEvent builder];
}
- (TouchEvent_Builder*) toBuilder {
  return [TouchEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAction) {
    [output appendFormat:@"%@%@: %@\n", indent, @"action", [NSNumber numberWithInt:self.action]];
  }
  for (TouchEvent_PointerCoords* element in self.itemsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAction) {
    [dictionary setObject: [NSNumber numberWithInt:self.action] forKey: @"action"];
  }
  for (TouchEvent_PointerCoords* element in self.itemsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey: @"items"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TouchEvent class]]) {
    return NO;
  }
  TouchEvent *otherMessage = other;
  return
      self.hasAction == otherMessage.hasAction &&
      (!self.hasAction || self.action == otherMessage.action) &&
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasAction) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.action] hash];
  }
  for (TouchEvent_PointerCoords* element in self.itemsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TouchEvent_PointerCoords ()
@property int32_t id;
@property Float32 x;
@property Float32 y;
@end

@implementation TouchEvent_PointerCoords

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value_ {
  hasX_ = !!value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value_ {
  hasY_ = !!value_;
}
@synthesize y;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static TouchEvent_PointerCoords* defaultTouchEvent_PointerCoordsInstance = nil;
+ (void) initialize {
  if (self == [TouchEvent_PointerCoords class]) {
    defaultTouchEvent_PointerCoordsInstance = [[TouchEvent_PointerCoords alloc] init];
  }
}
+ (TouchEvent_PointerCoords*) defaultInstance {
  return defaultTouchEvent_PointerCoordsInstance;
}
- (TouchEvent_PointerCoords*) defaultInstance {
  return defaultTouchEvent_PointerCoordsInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasX) {
    [output writeFloat:2 value:self.x];
  }
  if (self.hasY) {
    [output writeFloat:3 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasX) {
    size_ += computeFloatSize(2, self.x);
  }
  if (self.hasY) {
    size_ += computeFloatSize(3, self.y);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TouchEvent_PointerCoords*) parseFromData:(NSData*) data {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromData:data] build];
}
+ (TouchEvent_PointerCoords*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent_PointerCoords*) parseFromInputStream:(NSInputStream*) input {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromInputStream:input] build];
}
+ (TouchEvent_PointerCoords*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent_PointerCoords*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromCodedInputStream:input] build];
}
+ (TouchEvent_PointerCoords*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TouchEvent_PointerCoords*)[[[TouchEvent_PointerCoords builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TouchEvent_PointerCoords_Builder*) builder {
  return [[TouchEvent_PointerCoords_Builder alloc] init];
}
+ (TouchEvent_PointerCoords_Builder*) builderWithPrototype:(TouchEvent_PointerCoords*) prototype {
  return [[TouchEvent_PointerCoords builder] mergeFrom:prototype];
}
- (TouchEvent_PointerCoords_Builder*) builder {
  return [TouchEvent_PointerCoords builder];
}
- (TouchEvent_PointerCoords_Builder*) toBuilder {
  return [TouchEvent_PointerCoords builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithFloat:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithFloat:self.y]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInt:self.id] forKey: @"id"];
  }
  if (self.hasX) {
    [dictionary setObject: [NSNumber numberWithFloat:self.x] forKey: @"x"];
  }
  if (self.hasY) {
    [dictionary setObject: [NSNumber numberWithFloat:self.y] forKey: @"y"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TouchEvent_PointerCoords class]]) {
    return NO;
  }
  TouchEvent_PointerCoords *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.y] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TouchEvent_PointerCoords_Builder()
@property (strong) TouchEvent_PointerCoords* result;
@end

@implementation TouchEvent_PointerCoords_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TouchEvent_PointerCoords alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TouchEvent_PointerCoords_Builder*) clear {
  self.result = [[TouchEvent_PointerCoords alloc] init];
  return self;
}
- (TouchEvent_PointerCoords_Builder*) clone {
  return [TouchEvent_PointerCoords builderWithPrototype:result];
}
- (TouchEvent_PointerCoords*) defaultInstance {
  return [TouchEvent_PointerCoords defaultInstance];
}
- (TouchEvent_PointerCoords*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TouchEvent_PointerCoords*) buildPartial {
  TouchEvent_PointerCoords* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TouchEvent_PointerCoords_Builder*) mergeFrom:(TouchEvent_PointerCoords*) other {
  if (other == [TouchEvent_PointerCoords defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TouchEvent_PointerCoords_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TouchEvent_PointerCoords_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 21: {
        [self setX:[input readFloat]];
        break;
      }
      case 29: {
        [self setY:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (TouchEvent_PointerCoords_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TouchEvent_PointerCoords_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasX {
  return result.hasX;
}
- (Float32) x {
  return result.x;
}
- (TouchEvent_PointerCoords_Builder*) setX:(Float32) value {
  result.hasX = YES;
  result.x = value;
  return self;
}
- (TouchEvent_PointerCoords_Builder*) clearX {
  result.hasX = NO;
  result.x = 0;
  return self;
}
- (BOOL) hasY {
  return result.hasY;
}
- (Float32) y {
  return result.y;
}
- (TouchEvent_PointerCoords_Builder*) setY:(Float32) value {
  result.hasY = YES;
  result.y = value;
  return self;
}
- (TouchEvent_PointerCoords_Builder*) clearY {
  result.hasY = NO;
  result.y = 0;
  return self;
}
@end

@interface TouchEvent_Builder()
@property (strong) TouchEvent* result;
@end

@implementation TouchEvent_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TouchEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TouchEvent_Builder*) clear {
  self.result = [[TouchEvent alloc] init];
  return self;
}
- (TouchEvent_Builder*) clone {
  return [TouchEvent builderWithPrototype:result];
}
- (TouchEvent*) defaultInstance {
  return [TouchEvent defaultInstance];
}
- (TouchEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TouchEvent*) buildPartial {
  TouchEvent* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TouchEvent_Builder*) mergeFrom:(TouchEvent*) other {
  if (other == [TouchEvent defaultInstance]) {
    return self;
  }
  if (other.hasAction) {
    [self setAction:other.action];
  }
  if (other.itemsArray.count > 0) {
    if (result.itemsArray == nil) {
      result.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [result.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TouchEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TouchEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setAction:[input readInt32]];
        break;
      }
      case 18: {
        TouchEvent_PointerCoords_Builder* subBuilder = [TouchEvent_PointerCoords builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasAction {
  return result.hasAction;
}
- (int32_t) action {
  return result.action;
}
- (TouchEvent_Builder*) setAction:(int32_t) value {
  result.hasAction = YES;
  result.action = value;
  return self;
}
- (TouchEvent_Builder*) clearAction {
  result.hasAction = NO;
  result.action = 0;
  return self;
}
- (NSMutableArray *)items {
  return result.itemsArray;
}
- (TouchEvent_PointerCoords*)itemsAtIndex:(NSUInteger)index {
  return [result itemsAtIndex:index];
}
- (TouchEvent_Builder *)addItems:(TouchEvent_PointerCoords*)value {
  if (result.itemsArray == nil) {
    result.itemsArray = [[NSMutableArray alloc]init];
  }
  [result.itemsArray addObject:value];
  return self;
}
- (TouchEvent_Builder *)setItemsArray:(NSArray *)array {
  result.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TouchEvent_Builder *)clearItems {
  result.itemsArray = nil;
  return self;
}
@end

@interface ScreenInfo ()
@property int32_t x;
@property int32_t y;
@end

@implementation ScreenInfo

- (BOOL) hasX {
  return !!hasX_;
}
- (void) setHasX:(BOOL) value_ {
  hasX_ = !!value_;
}
@synthesize x;
- (BOOL) hasY {
  return !!hasY_;
}
- (void) setHasY:(BOOL) value_ {
  hasY_ = !!value_;
}
@synthesize y;
- (id) init {
  if ((self = [super init])) {
    self.x = 0;
    self.y = 0;
  }
  return self;
}
static ScreenInfo* defaultScreenInfoInstance = nil;
+ (void) initialize {
  if (self == [ScreenInfo class]) {
    defaultScreenInfoInstance = [[ScreenInfo alloc] init];
  }
}
+ (ScreenInfo*) defaultInstance {
  return defaultScreenInfoInstance;
}
- (ScreenInfo*) defaultInstance {
  return defaultScreenInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasX) {
    return NO;
  }
  if (!self.hasY) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasX) {
    [output writeInt32:1 value:self.x];
  }
  if (self.hasY) {
    [output writeInt32:2 value:self.y];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasX) {
    size_ += computeInt32Size(1, self.x);
  }
  if (self.hasY) {
    size_ += computeInt32Size(2, self.y);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ScreenInfo*) parseFromData:(NSData*) data {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromData:data] build];
}
+ (ScreenInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ScreenInfo*) parseFromInputStream:(NSInputStream*) input {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromInputStream:input] build];
}
+ (ScreenInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ScreenInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromCodedInputStream:input] build];
}
+ (ScreenInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ScreenInfo*)[[[ScreenInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ScreenInfo_Builder*) builder {
  return [[ScreenInfo_Builder alloc] init];
}
+ (ScreenInfo_Builder*) builderWithPrototype:(ScreenInfo*) prototype {
  return [[ScreenInfo builder] mergeFrom:prototype];
}
- (ScreenInfo_Builder*) builder {
  return [ScreenInfo builder];
}
- (ScreenInfo_Builder*) toBuilder {
  return [ScreenInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"x", [NSNumber numberWithInt:self.x]];
  }
  if (self.hasY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"y", [NSNumber numberWithInt:self.y]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasX) {
    [dictionary setObject: [NSNumber numberWithInt:self.x] forKey: @"x"];
  }
  if (self.hasY) {
    [dictionary setObject: [NSNumber numberWithInt:self.y] forKey: @"y"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ScreenInfo class]]) {
    return NO;
  }
  ScreenInfo *otherMessage = other;
  return
      self.hasX == otherMessage.hasX &&
      (!self.hasX || self.x == otherMessage.x) &&
      self.hasY == otherMessage.hasY &&
      (!self.hasY || self.y == otherMessage.y) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.x] hash];
  }
  if (self.hasY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.y] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ScreenInfo_Builder()
@property (strong) ScreenInfo* result;
@end

@implementation ScreenInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ScreenInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ScreenInfo_Builder*) clear {
  self.result = [[ScreenInfo alloc] init];
  return self;
}
- (ScreenInfo_Builder*) clone {
  return [ScreenInfo builderWithPrototype:result];
}
- (ScreenInfo*) defaultInstance {
  return [ScreenInfo defaultInstance];
}
- (ScreenInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ScreenInfo*) buildPartial {
  ScreenInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ScreenInfo_Builder*) mergeFrom:(ScreenInfo*) other {
  if (other == [ScreenInfo defaultInstance]) {
    return self;
  }
  if (other.hasX) {
    [self setX:other.x];
  }
  if (other.hasY) {
    [self setY:other.y];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ScreenInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ScreenInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setX:[input readInt32]];
        break;
      }
      case 16: {
        [self setY:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasX {
  return result.hasX;
}
- (int32_t) x {
  return result.x;
}
- (ScreenInfo_Builder*) setX:(int32_t) value {
  result.hasX = YES;
  result.x = value;
  return self;
}
- (ScreenInfo_Builder*) clearX {
  result.hasX = NO;
  result.x = 0;
  return self;
}
- (BOOL) hasY {
  return result.hasY;
}
- (int32_t) y {
  return result.y;
}
- (ScreenInfo_Builder*) setY:(int32_t) value {
  result.hasY = YES;
  result.y = value;
  return self;
}
- (ScreenInfo_Builder*) clearY {
  result.hasY = NO;
  result.y = 0;
  return self;
}
@end

@interface SensorEvent ()
@property SensorType type;
@property int32_t accuracy;
@property int64_t timestamp;
@property (strong) PBAppendableArray * valuesArray;
@end

@implementation SensorEvent

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasAccuracy {
  return !!hasAccuracy_;
}
- (void) setHasAccuracy:(BOOL) value_ {
  hasAccuracy_ = !!value_;
}
@synthesize accuracy;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value_ {
  hasTimestamp_ = !!value_;
}
@synthesize timestamp;
@synthesize valuesArray;
@dynamic values;
- (id) init {
  if ((self = [super init])) {
    self.type = SensorTypeAccelerometer;
    self.accuracy = 0;
    self.timestamp = 0L;
  }
  return self;
}
static SensorEvent* defaultSensorEventInstance = nil;
+ (void) initialize {
  if (self == [SensorEvent class]) {
    defaultSensorEventInstance = [[SensorEvent alloc] init];
  }
}
+ (SensorEvent*) defaultInstance {
  return defaultSensorEventInstance;
}
- (SensorEvent*) defaultInstance {
  return defaultSensorEventInstance;
}
- (PBArray *)values {
  return valuesArray;
}
- (Float32)valuesAtIndex:(NSUInteger)index {
  return [valuesArray floatAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasAccuracy) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasAccuracy) {
    [output writeInt32:2 value:self.accuracy];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  const NSUInteger valuesArrayCount = self.valuesArray.count;
  if (valuesArrayCount > 0) {
    const Float32 *values = (const Float32 *)self.valuesArray.data;
    for (NSUInteger i = 0; i < valuesArrayCount; ++i) {
      [output writeFloat:4 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasAccuracy) {
    size_ += computeInt32Size(2, self.accuracy);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(3, self.timestamp);
  }
  {
    int32_t dataSize = 0;
    const NSUInteger count = self.valuesArray.count;
    dataSize = 4 * count;
    size_ += dataSize;
    size_ += 1 * count;
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SensorEvent*) parseFromData:(NSData*) data {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromData:data] build];
}
+ (SensorEvent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SensorEvent*) parseFromInputStream:(NSInputStream*) input {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromInputStream:input] build];
}
+ (SensorEvent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromCodedInputStream:input] build];
}
+ (SensorEvent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorEvent*)[[[SensorEvent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorEvent_Builder*) builder {
  return [[SensorEvent_Builder alloc] init];
}
+ (SensorEvent_Builder*) builderWithPrototype:(SensorEvent*) prototype {
  return [[SensorEvent builder] mergeFrom:prototype];
}
- (SensorEvent_Builder*) builder {
  return [SensorEvent builder];
}
- (SensorEvent_Builder*) toBuilder {
  return [SensorEvent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasAccuracy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accuracy", [NSNumber numberWithInt:self.accuracy]];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  NSUInteger valuesArrayCount=self.valuesArray.count;
  for(int i=0;i<valuesArrayCount;i++){
    [output appendFormat:@"%@%@: %d\n", indent, @"values", [self.valuesArray floatAtIndex:i]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasAccuracy) {
    [dictionary setObject: [NSNumber numberWithInt:self.accuracy] forKey: @"accuracy"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  NSMutableArray * valuesArrayArray = [NSMutableArray new];
  NSUInteger valuesArrayCount=self.valuesArray.count;
  for(int i=0;i<valuesArrayCount;i++){
       //** SVMP fixes and work around
      [valuesArrayArray addObject: @([self.valuesArray floatAtIndex:i])]; // forKey: @"values"];
  }
  [dictionary setObject: valuesArrayArray forKey: @"values"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SensorEvent class]]) {
    return NO;
  }
  SensorEvent *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasAccuracy == otherMessage.hasAccuracy &&
      (!self.hasAccuracy || self.accuracy == otherMessage.accuracy) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      [self.valuesArray isEqualToArray:otherMessage.valuesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasAccuracy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accuracy] hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  NSUInteger valuesArrayCount=self.valuesArray.count;
  for(int i=0;i<valuesArrayCount;i++){
  hashCode = hashCode * 31 + [self.valuesArray floatAtIndex:i];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SensorEvent_Builder()
@property (strong) SensorEvent* result;
@end

@implementation SensorEvent_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SensorEvent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SensorEvent_Builder*) clear {
  self.result = [[SensorEvent alloc] init];
  return self;
}
- (SensorEvent_Builder*) clone {
  return [SensorEvent builderWithPrototype:result];
}
- (SensorEvent*) defaultInstance {
  return [SensorEvent defaultInstance];
}
- (SensorEvent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SensorEvent*) buildPartial {
  SensorEvent* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SensorEvent_Builder*) mergeFrom:(SensorEvent*) other {
  if (other == [SensorEvent defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasAccuracy) {
    [self setAccuracy:other.accuracy];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.valuesArray.count > 0) {
    if (result.valuesArray == nil) {
      result.valuesArray = [other.valuesArray copy];
    } else {
      [result.valuesArray appendArray:other.valuesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SensorEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SensorEvent_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (SensorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setAccuracy:[input readInt32]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 37: {
        [self addValues:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (SensorType) type {
  return result.type;
}
- (SensorEvent_Builder*) setType:(SensorType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SensorEvent_Builder*) clearType {
  result.hasType = NO;
  result.type = SensorTypeAccelerometer;
  return self;
}
- (BOOL) hasAccuracy {
  return result.hasAccuracy;
}
- (int32_t) accuracy {
  return result.accuracy;
}
- (SensorEvent_Builder*) setAccuracy:(int32_t) value {
  result.hasAccuracy = YES;
  result.accuracy = value;
  return self;
}
- (SensorEvent_Builder*) clearAccuracy {
  result.hasAccuracy = NO;
  result.accuracy = 0;
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (SensorEvent_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (SensorEvent_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (PBAppendableArray *)values {
  return result.valuesArray;
}
- (Float32)valuesAtIndex:(NSUInteger)index {
  return [result valuesAtIndex:index];
}
- (SensorEvent_Builder *)addValues:(Float32)value {
  if (result.valuesArray == nil) {
    result.valuesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeFloat];
  }
  [result.valuesArray addFloat:value];
  return self;
}
- (SensorEvent_Builder *)setValuesArray:(NSArray *)array {
  result.valuesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeFloat];
  return self;
}
- (SensorEvent_Builder *)setValuesValues:(const Float32 *)values count:(NSUInteger)count {
  result.valuesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeFloat];
  return self;
}
- (SensorEvent_Builder *)clearValues {
  result.valuesArray = nil;
  return self;
}
@end

@interface SensorSubscribe ()
@property SensorType type;
@property int32_t frequency;
@end

@implementation SensorSubscribe

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasFrequency {
  return !!hasFrequency_;
}
- (void) setHasFrequency:(BOOL) value_ {
  hasFrequency_ = !!value_;
}
@synthesize frequency;
- (id) init {
  if ((self = [super init])) {
    self.type = SensorTypeAccelerometer;
    self.frequency = 0;
  }
  return self;
}
static SensorSubscribe* defaultSensorSubscribeInstance = nil;
+ (void) initialize {
  if (self == [SensorSubscribe class]) {
    defaultSensorSubscribeInstance = [[SensorSubscribe alloc] init];
  }
}
+ (SensorSubscribe*) defaultInstance {
  return defaultSensorSubscribeInstance;
}
- (SensorSubscribe*) defaultInstance {
  return defaultSensorSubscribeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasFrequency) {
    [output writeInt32:2 value:self.frequency];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasFrequency) {
    size_ += computeInt32Size(2, self.frequency);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SensorSubscribe*) parseFromData:(NSData*) data {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromData:data] build];
}
+ (SensorSubscribe*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SensorSubscribe*) parseFromInputStream:(NSInputStream*) input {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromInputStream:input] build];
}
+ (SensorSubscribe*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorSubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromCodedInputStream:input] build];
}
+ (SensorSubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorSubscribe*)[[[SensorSubscribe builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorSubscribe_Builder*) builder {
  return [[SensorSubscribe_Builder alloc] init];
}
+ (SensorSubscribe_Builder*) builderWithPrototype:(SensorSubscribe*) prototype {
  return [[SensorSubscribe builder] mergeFrom:prototype];
}
- (SensorSubscribe_Builder*) builder {
  return [SensorSubscribe builder];
}
- (SensorSubscribe_Builder*) toBuilder {
  return [SensorSubscribe builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasFrequency) {
    [output appendFormat:@"%@%@: %@\n", indent, @"frequency", [NSNumber numberWithInt:self.frequency]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasFrequency) {
    [dictionary setObject: [NSNumber numberWithInt:self.frequency] forKey: @"frequency"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SensorSubscribe class]]) {
    return NO;
  }
  SensorSubscribe *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasFrequency == otherMessage.hasFrequency &&
      (!self.hasFrequency || self.frequency == otherMessage.frequency) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasFrequency) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.frequency] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SensorSubscribe_Builder()
@property (strong) SensorSubscribe* result;
@end

@implementation SensorSubscribe_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SensorSubscribe alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SensorSubscribe_Builder*) clear {
  self.result = [[SensorSubscribe alloc] init];
  return self;
}
- (SensorSubscribe_Builder*) clone {
  return [SensorSubscribe builderWithPrototype:result];
}
- (SensorSubscribe*) defaultInstance {
  return [SensorSubscribe defaultInstance];
}
- (SensorSubscribe*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SensorSubscribe*) buildPartial {
  SensorSubscribe* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SensorSubscribe_Builder*) mergeFrom:(SensorSubscribe*) other {
  if (other == [SensorSubscribe defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasFrequency) {
    [self setFrequency:other.frequency];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SensorSubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SensorSubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (SensorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setFrequency:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (SensorType) type {
  return result.type;
}
- (SensorSubscribe_Builder*) setType:(SensorType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SensorSubscribe_Builder*) clearType {
  result.hasType = NO;
  result.type = SensorTypeAccelerometer;
  return self;
}
- (BOOL) hasFrequency {
  return result.hasFrequency;
}
- (int32_t) frequency {
  return result.frequency;
}
- (SensorSubscribe_Builder*) setFrequency:(int32_t) value {
  result.hasFrequency = YES;
  result.frequency = value;
  return self;
}
- (SensorSubscribe_Builder*) clearFrequency {
  result.hasFrequency = NO;
  result.frequency = 0;
  return self;
}
@end

@interface SensorUnsubscribe ()
@property SensorType type;
@end

@implementation SensorUnsubscribe

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.type = SensorTypeAccelerometer;
  }
  return self;
}
static SensorUnsubscribe* defaultSensorUnsubscribeInstance = nil;
+ (void) initialize {
  if (self == [SensorUnsubscribe class]) {
    defaultSensorUnsubscribeInstance = [[SensorUnsubscribe alloc] init];
  }
}
+ (SensorUnsubscribe*) defaultInstance {
  return defaultSensorUnsubscribeInstance;
}
- (SensorUnsubscribe*) defaultInstance {
  return defaultSensorUnsubscribeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SensorUnsubscribe*) parseFromData:(NSData*) data {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromData:data] build];
}
+ (SensorUnsubscribe*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SensorUnsubscribe*) parseFromInputStream:(NSInputStream*) input {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromInputStream:input] build];
}
+ (SensorUnsubscribe*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorUnsubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromCodedInputStream:input] build];
}
+ (SensorUnsubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SensorUnsubscribe*)[[[SensorUnsubscribe builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SensorUnsubscribe_Builder*) builder {
  return [[SensorUnsubscribe_Builder alloc] init];
}
+ (SensorUnsubscribe_Builder*) builderWithPrototype:(SensorUnsubscribe*) prototype {
  return [[SensorUnsubscribe builder] mergeFrom:prototype];
}
- (SensorUnsubscribe_Builder*) builder {
  return [SensorUnsubscribe builder];
}
- (SensorUnsubscribe_Builder*) toBuilder {
  return [SensorUnsubscribe builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SensorUnsubscribe class]]) {
    return NO;
  }
  SensorUnsubscribe *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SensorUnsubscribe_Builder()
@property (strong) SensorUnsubscribe* result;
@end

@implementation SensorUnsubscribe_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SensorUnsubscribe alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SensorUnsubscribe_Builder*) clear {
  self.result = [[SensorUnsubscribe alloc] init];
  return self;
}
- (SensorUnsubscribe_Builder*) clone {
  return [SensorUnsubscribe builderWithPrototype:result];
}
- (SensorUnsubscribe*) defaultInstance {
  return [SensorUnsubscribe defaultInstance];
}
- (SensorUnsubscribe*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SensorUnsubscribe*) buildPartial {
  SensorUnsubscribe* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SensorUnsubscribe_Builder*) mergeFrom:(SensorUnsubscribe*) other {
  if (other == [SensorUnsubscribe defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SensorUnsubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SensorUnsubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (SensorTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (SensorType) type {
  return result.type;
}
- (SensorUnsubscribe_Builder*) setType:(SensorType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SensorUnsubscribe_Builder*) clearType {
  result.hasType = NO;
  result.type = SensorTypeAccelerometer;
  return self;
}
@end

@interface LocationProviderInfo ()
@property (strong) NSString* provider;
@property BOOL requiresNetwork;
@property BOOL requiresSatellite;
@property BOOL requiresCell;
@property BOOL hasMonetaryCost;
@property BOOL supportsAltitude;
@property BOOL supportsSpeed;
@property BOOL supportsBearing;
@property int32_t powerRequirement;
@property int32_t accuracy;
@end

@implementation LocationProviderInfo

- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (BOOL) hasRequiresNetwork {
  return !!hasRequiresNetwork_;
}
- (void) setHasRequiresNetwork:(BOOL) value_ {
  hasRequiresNetwork_ = !!value_;
}
- (BOOL) requiresNetwork {
  return !!requiresNetwork_;
}
- (void) setRequiresNetwork:(BOOL) value {
  requiresNetwork_ = !!value;
}
- (BOOL) hasRequiresSatellite {
  return !!hasRequiresSatellite_;
}
- (void) setHasRequiresSatellite:(BOOL) value_ {
  hasRequiresSatellite_ = !!value_;
}
- (BOOL) requiresSatellite {
  return !!requiresSatellite_;
}
- (void) setRequiresSatellite:(BOOL) value {
  requiresSatellite_ = !!value;
}
- (BOOL) hasRequiresCell {
  return !!hasRequiresCell_;
}
- (void) setHasRequiresCell:(BOOL) value_ {
  hasRequiresCell_ = !!value_;
}
- (BOOL) requiresCell {
  return !!requiresCell_;
}
- (void) setRequiresCell:(BOOL) value {
  requiresCell_ = !!value;
}
- (BOOL) hasHasMonetaryCost {
  return !!hasHasMonetaryCost_;
}
- (void) setHasHasMonetaryCost:(BOOL) value_ {
  hasHasMonetaryCost_ = !!value_;
}
- (BOOL) hasMonetaryCost {
  return !!hasMonetaryCost_;
}
- (void) setHasMonetaryCost:(BOOL) value {
  hasMonetaryCost_ = !!value;
}
- (BOOL) hasSupportsAltitude {
  return !!hasSupportsAltitude_;
}
- (void) setHasSupportsAltitude:(BOOL) value_ {
  hasSupportsAltitude_ = !!value_;
}
- (BOOL) supportsAltitude {
  return !!supportsAltitude_;
}
- (void) setSupportsAltitude:(BOOL) value {
  supportsAltitude_ = !!value;
}
- (BOOL) hasSupportsSpeed {
  return !!hasSupportsSpeed_;
}
- (void) setHasSupportsSpeed:(BOOL) value_ {
  hasSupportsSpeed_ = !!value_;
}
- (BOOL) supportsSpeed {
  return !!supportsSpeed_;
}
- (void) setSupportsSpeed:(BOOL) value {
  supportsSpeed_ = !!value;
}
- (BOOL) hasSupportsBearing {
  return !!hasSupportsBearing_;
}
- (void) setHasSupportsBearing:(BOOL) value_ {
  hasSupportsBearing_ = !!value_;
}
- (BOOL) supportsBearing {
  return !!supportsBearing_;
}
- (void) setSupportsBearing:(BOOL) value {
  supportsBearing_ = !!value;
}
- (BOOL) hasPowerRequirement {
  return !!hasPowerRequirement_;
}
- (void) setHasPowerRequirement:(BOOL) value_ {
  hasPowerRequirement_ = !!value_;
}
@synthesize powerRequirement;
- (BOOL) hasAccuracy {
  return !!hasAccuracy_;
}
- (void) setHasAccuracy:(BOOL) value_ {
  hasAccuracy_ = !!value_;
}
@synthesize accuracy;
- (id) init {
  if ((self = [super init])) {
    self.provider = @"";
    self.requiresNetwork = NO;
    self.requiresSatellite = NO;
    self.requiresCell = NO;
    self.hasMonetaryCost = NO;
    self.supportsAltitude = NO;
    self.supportsSpeed = NO;
    self.supportsBearing = NO;
    self.powerRequirement = 0;
    self.accuracy = 0;
  }
  return self;
}
static LocationProviderInfo* defaultLocationProviderInfoInstance = nil;
+ (void) initialize {
  if (self == [LocationProviderInfo class]) {
    defaultLocationProviderInfoInstance = [[LocationProviderInfo alloc] init];
  }
}
+ (LocationProviderInfo*) defaultInstance {
  return defaultLocationProviderInfoInstance;
}
- (LocationProviderInfo*) defaultInstance {
  return defaultLocationProviderInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasProvider) {
    return NO;
  }
  if (!self.hasRequiresNetwork) {
    return NO;
  }
  if (!self.hasRequiresSatellite) {
    return NO;
  }
  if (!self.hasRequiresCell) {
    return NO;
  }
  if (!self.hasHasMonetaryCost) {
    return NO;
  }
  if (!self.hasSupportsAltitude) {
    return NO;
  }
  if (!self.hasSupportsSpeed) {
    return NO;
  }
  if (!self.hasSupportsBearing) {
    return NO;
  }
  if (!self.hasPowerRequirement) {
    return NO;
  }
  if (!self.hasAccuracy) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvider) {
    [output writeString:1 value:self.provider];
  }
  if (self.hasRequiresNetwork) {
    [output writeBool:2 value:self.requiresNetwork];
  }
  if (self.hasRequiresSatellite) {
    [output writeBool:3 value:self.requiresSatellite];
  }
  if (self.hasRequiresCell) {
    [output writeBool:4 value:self.requiresCell];
  }
  if (self.hasHasMonetaryCost) {
    [output writeBool:5 value:self.hasMonetaryCost];
  }
  if (self.hasSupportsAltitude) {
    [output writeBool:6 value:self.supportsAltitude];
  }
  if (self.hasSupportsSpeed) {
    [output writeBool:7 value:self.supportsSpeed];
  }
  if (self.hasSupportsBearing) {
    [output writeBool:8 value:self.supportsBearing];
  }
  if (self.hasPowerRequirement) {
    [output writeInt32:9 value:self.powerRequirement];
  }
  if (self.hasAccuracy) {
    [output writeInt32:10 value:self.accuracy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvider) {
    size_ += computeStringSize(1, self.provider);
  }
  if (self.hasRequiresNetwork) {
    size_ += computeBoolSize(2, self.requiresNetwork);
  }
  if (self.hasRequiresSatellite) {
    size_ += computeBoolSize(3, self.requiresSatellite);
  }
  if (self.hasRequiresCell) {
    size_ += computeBoolSize(4, self.requiresCell);
  }
  if (self.hasHasMonetaryCost) {
    size_ += computeBoolSize(5, self.hasMonetaryCost);
  }
  if (self.hasSupportsAltitude) {
    size_ += computeBoolSize(6, self.supportsAltitude);
  }
  if (self.hasSupportsSpeed) {
    size_ += computeBoolSize(7, self.supportsSpeed);
  }
  if (self.hasSupportsBearing) {
    size_ += computeBoolSize(8, self.supportsBearing);
  }
  if (self.hasPowerRequirement) {
    size_ += computeInt32Size(9, self.powerRequirement);
  }
  if (self.hasAccuracy) {
    size_ += computeInt32Size(10, self.accuracy);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationProviderInfo*) parseFromData:(NSData*) data {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromData:data] build];
}
+ (LocationProviderInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderInfo*) parseFromInputStream:(NSInputStream*) input {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromInputStream:input] build];
}
+ (LocationProviderInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromCodedInputStream:input] build];
}
+ (LocationProviderInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderInfo*)[[[LocationProviderInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderInfo_Builder*) builder {
  return [[LocationProviderInfo_Builder alloc] init];
}
+ (LocationProviderInfo_Builder*) builderWithPrototype:(LocationProviderInfo*) prototype {
  return [[LocationProviderInfo builder] mergeFrom:prototype];
}
- (LocationProviderInfo_Builder*) builder {
  return [LocationProviderInfo builder];
}
- (LocationProviderInfo_Builder*) toBuilder {
  return [LocationProviderInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  if (self.hasRequiresNetwork) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiresNetwork", [NSNumber numberWithBool:self.requiresNetwork]];
  }
  if (self.hasRequiresSatellite) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiresSatellite", [NSNumber numberWithBool:self.requiresSatellite]];
  }
  if (self.hasRequiresCell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiresCell", [NSNumber numberWithBool:self.requiresCell]];
  }
  if (self.hasHasMonetaryCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMonetaryCost", [NSNumber numberWithBool:self.hasMonetaryCost]];
  }
  if (self.hasSupportsAltitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportsAltitude", [NSNumber numberWithBool:self.supportsAltitude]];
  }
  if (self.hasSupportsSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportsSpeed", [NSNumber numberWithBool:self.supportsSpeed]];
  }
  if (self.hasSupportsBearing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"supportsBearing", [NSNumber numberWithBool:self.supportsBearing]];
  }
  if (self.hasPowerRequirement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"powerRequirement", [NSNumber numberWithInt:self.powerRequirement]];
  }
  if (self.hasAccuracy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accuracy", [NSNumber numberWithInt:self.accuracy]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  if (self.hasRequiresNetwork) {
    [dictionary setObject: [NSNumber numberWithBool:self.requiresNetwork] forKey: @"requiresNetwork"];
  }
  if (self.hasRequiresSatellite) {
    [dictionary setObject: [NSNumber numberWithBool:self.requiresSatellite] forKey: @"requiresSatellite"];
  }
  if (self.hasRequiresCell) {
    [dictionary setObject: [NSNumber numberWithBool:self.requiresCell] forKey: @"requiresCell"];
  }
  if (self.hasHasMonetaryCost) {
    [dictionary setObject: [NSNumber numberWithBool:self.hasMonetaryCost] forKey: @"hasMonetaryCost"];
  }
  if (self.hasSupportsAltitude) {
    [dictionary setObject: [NSNumber numberWithBool:self.supportsAltitude] forKey: @"supportsAltitude"];
  }
  if (self.hasSupportsSpeed) {
    [dictionary setObject: [NSNumber numberWithBool:self.supportsSpeed] forKey: @"supportsSpeed"];
  }
  if (self.hasSupportsBearing) {
    [dictionary setObject: [NSNumber numberWithBool:self.supportsBearing] forKey: @"supportsBearing"];
  }
  if (self.hasPowerRequirement) {
    [dictionary setObject: [NSNumber numberWithInt:self.powerRequirement] forKey: @"powerRequirement"];
  }
  if (self.hasAccuracy) {
    [dictionary setObject: [NSNumber numberWithInt:self.accuracy] forKey: @"accuracy"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationProviderInfo class]]) {
    return NO;
  }
  LocationProviderInfo *otherMessage = other;
  return
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      self.hasRequiresNetwork == otherMessage.hasRequiresNetwork &&
      (!self.hasRequiresNetwork || self.requiresNetwork == otherMessage.requiresNetwork) &&
      self.hasRequiresSatellite == otherMessage.hasRequiresSatellite &&
      (!self.hasRequiresSatellite || self.requiresSatellite == otherMessage.requiresSatellite) &&
      self.hasRequiresCell == otherMessage.hasRequiresCell &&
      (!self.hasRequiresCell || self.requiresCell == otherMessage.requiresCell) &&
      self.hasHasMonetaryCost == otherMessage.hasHasMonetaryCost &&
      (!self.hasHasMonetaryCost || self.hasMonetaryCost == otherMessage.hasMonetaryCost) &&
      self.hasSupportsAltitude == otherMessage.hasSupportsAltitude &&
      (!self.hasSupportsAltitude || self.supportsAltitude == otherMessage.supportsAltitude) &&
      self.hasSupportsSpeed == otherMessage.hasSupportsSpeed &&
      (!self.hasSupportsSpeed || self.supportsSpeed == otherMessage.supportsSpeed) &&
      self.hasSupportsBearing == otherMessage.hasSupportsBearing &&
      (!self.hasSupportsBearing || self.supportsBearing == otherMessage.supportsBearing) &&
      self.hasPowerRequirement == otherMessage.hasPowerRequirement &&
      (!self.hasPowerRequirement || self.powerRequirement == otherMessage.powerRequirement) &&
      self.hasAccuracy == otherMessage.hasAccuracy &&
      (!self.hasAccuracy || self.accuracy == otherMessage.accuracy) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  if (self.hasRequiresNetwork) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requiresNetwork] hash];
  }
  if (self.hasRequiresSatellite) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requiresSatellite] hash];
  }
  if (self.hasRequiresCell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requiresCell] hash];
  }
  if (self.hasHasMonetaryCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMonetaryCost] hash];
  }
  if (self.hasSupportsAltitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.supportsAltitude] hash];
  }
  if (self.hasSupportsSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.supportsSpeed] hash];
  }
  if (self.hasSupportsBearing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.supportsBearing] hash];
  }
  if (self.hasPowerRequirement) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.powerRequirement] hash];
  }
  if (self.hasAccuracy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.accuracy] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationProviderInfo_Builder()
@property (strong) LocationProviderInfo* result;
@end

@implementation LocationProviderInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationProviderInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationProviderInfo_Builder*) clear {
  self.result = [[LocationProviderInfo alloc] init];
  return self;
}
- (LocationProviderInfo_Builder*) clone {
  return [LocationProviderInfo builderWithPrototype:result];
}
- (LocationProviderInfo*) defaultInstance {
  return [LocationProviderInfo defaultInstance];
}
- (LocationProviderInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationProviderInfo*) buildPartial {
  LocationProviderInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationProviderInfo_Builder*) mergeFrom:(LocationProviderInfo*) other {
  if (other == [LocationProviderInfo defaultInstance]) {
    return self;
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.hasRequiresNetwork) {
    [self setRequiresNetwork:other.requiresNetwork];
  }
  if (other.hasRequiresSatellite) {
    [self setRequiresSatellite:other.requiresSatellite];
  }
  if (other.hasRequiresCell) {
    [self setRequiresCell:other.requiresCell];
  }
  if (other.hasHasMonetaryCost) {
    [self setHasMonetaryCost:other.hasMonetaryCost];
  }
  if (other.hasSupportsAltitude) {
    [self setSupportsAltitude:other.supportsAltitude];
  }
  if (other.hasSupportsSpeed) {
    [self setSupportsSpeed:other.supportsSpeed];
  }
  if (other.hasSupportsBearing) {
    [self setSupportsBearing:other.supportsBearing];
  }
  if (other.hasPowerRequirement) {
    [self setPowerRequirement:other.powerRequirement];
  }
  if (other.hasAccuracy) {
    [self setAccuracy:other.accuracy];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationProviderInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationProviderInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProvider:[input readString]];
        break;
      }
      case 16: {
        [self setRequiresNetwork:[input readBool]];
        break;
      }
      case 24: {
        [self setRequiresSatellite:[input readBool]];
        break;
      }
      case 32: {
        [self setRequiresCell:[input readBool]];
        break;
      }
      case 40: {
        [self setHasMonetaryCost:[input readBool]];
        break;
      }
      case 48: {
        [self setSupportsAltitude:[input readBool]];
        break;
      }
      case 56: {
        [self setSupportsSpeed:[input readBool]];
        break;
      }
      case 64: {
        [self setSupportsBearing:[input readBool]];
        break;
      }
      case 72: {
        [self setPowerRequirement:[input readInt32]];
        break;
      }
      case 80: {
        [self setAccuracy:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationProviderInfo_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
- (BOOL) hasRequiresNetwork {
  return result.hasRequiresNetwork;
}
- (BOOL) requiresNetwork {
  return result.requiresNetwork;
}
- (LocationProviderInfo_Builder*) setRequiresNetwork:(BOOL) value {
  result.hasRequiresNetwork = YES;
  result.requiresNetwork = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearRequiresNetwork {
  result.hasRequiresNetwork = NO;
  result.requiresNetwork = NO;
  return self;
}
- (BOOL) hasRequiresSatellite {
  return result.hasRequiresSatellite;
}
- (BOOL) requiresSatellite {
  return result.requiresSatellite;
}
- (LocationProviderInfo_Builder*) setRequiresSatellite:(BOOL) value {
  result.hasRequiresSatellite = YES;
  result.requiresSatellite = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearRequiresSatellite {
  result.hasRequiresSatellite = NO;
  result.requiresSatellite = NO;
  return self;
}
- (BOOL) hasRequiresCell {
  return result.hasRequiresCell;
}
- (BOOL) requiresCell {
  return result.requiresCell;
}
- (LocationProviderInfo_Builder*) setRequiresCell:(BOOL) value {
  result.hasRequiresCell = YES;
  result.requiresCell = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearRequiresCell {
  result.hasRequiresCell = NO;
  result.requiresCell = NO;
  return self;
}
- (BOOL) hasHasMonetaryCost {
  return result.hasHasMonetaryCost;
}
- (BOOL) hasMonetaryCost {
  return result.hasMonetaryCost;
}
- (LocationProviderInfo_Builder*) setHasMonetaryCost:(BOOL) value {
  result.hasHasMonetaryCost = YES;
  result.hasMonetaryCost = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearHasMonetaryCost {
  result.hasHasMonetaryCost = NO;
  result.hasMonetaryCost = NO;
  return self;
}
- (BOOL) hasSupportsAltitude {
  return result.hasSupportsAltitude;
}
- (BOOL) supportsAltitude {
  return result.supportsAltitude;
}
- (LocationProviderInfo_Builder*) setSupportsAltitude:(BOOL) value {
  result.hasSupportsAltitude = YES;
  result.supportsAltitude = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearSupportsAltitude {
  result.hasSupportsAltitude = NO;
  result.supportsAltitude = NO;
  return self;
}
- (BOOL) hasSupportsSpeed {
  return result.hasSupportsSpeed;
}
- (BOOL) supportsSpeed {
  return result.supportsSpeed;
}
- (LocationProviderInfo_Builder*) setSupportsSpeed:(BOOL) value {
  result.hasSupportsSpeed = YES;
  result.supportsSpeed = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearSupportsSpeed {
  result.hasSupportsSpeed = NO;
  result.supportsSpeed = NO;
  return self;
}
- (BOOL) hasSupportsBearing {
  return result.hasSupportsBearing;
}
- (BOOL) supportsBearing {
  return result.supportsBearing;
}
- (LocationProviderInfo_Builder*) setSupportsBearing:(BOOL) value {
  result.hasSupportsBearing = YES;
  result.supportsBearing = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearSupportsBearing {
  result.hasSupportsBearing = NO;
  result.supportsBearing = NO;
  return self;
}
- (BOOL) hasPowerRequirement {
  return result.hasPowerRequirement;
}
- (int32_t) powerRequirement {
  return result.powerRequirement;
}
- (LocationProviderInfo_Builder*) setPowerRequirement:(int32_t) value {
  result.hasPowerRequirement = YES;
  result.powerRequirement = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearPowerRequirement {
  result.hasPowerRequirement = NO;
  result.powerRequirement = 0;
  return self;
}
- (BOOL) hasAccuracy {
  return result.hasAccuracy;
}
- (int32_t) accuracy {
  return result.accuracy;
}
- (LocationProviderInfo_Builder*) setAccuracy:(int32_t) value {
  result.hasAccuracy = YES;
  result.accuracy = value;
  return self;
}
- (LocationProviderInfo_Builder*) clearAccuracy {
  result.hasAccuracy = NO;
  result.accuracy = 0;
  return self;
}
@end

@interface LocationProviderStatus ()
@property (strong) NSString* provider;
@property int32_t status;
@property (strong) NSMutableArray * extrasArray;
@end

@implementation LocationProviderStatus

- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value_ {
  hasStatus_ = !!value_;
}
@synthesize status;
@synthesize extrasArray;
@dynamic extras;
- (id) init {
  if ((self = [super init])) {
    self.provider = @"";
    self.status = 0;
  }
  return self;
}
static LocationProviderStatus* defaultLocationProviderStatusInstance = nil;
+ (void) initialize {
  if (self == [LocationProviderStatus class]) {
    defaultLocationProviderStatusInstance = [[LocationProviderStatus alloc] init];
  }
}
+ (LocationProviderStatus*) defaultInstance {
  return defaultLocationProviderStatusInstance;
}
- (LocationProviderStatus*) defaultInstance {
  return defaultLocationProviderStatusInstance;
}
- (NSArray *)extras {
  return extrasArray;
}
- (LocationProviderStatus_Tuple*)extrasAtIndex:(NSUInteger)index {
  return [extrasArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasProvider) {
    return NO;
  }
  if (!self.hasStatus) {
    return NO;
  }
  for (LocationProviderStatus_Tuple* element in self.extras) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvider) {
    [output writeString:1 value:self.provider];
  }
  if (self.hasStatus) {
    [output writeInt32:2 value:self.status];
  }
  for (LocationProviderStatus_Tuple *element in self.extrasArray) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvider) {
    size_ += computeStringSize(1, self.provider);
  }
  if (self.hasStatus) {
    size_ += computeInt32Size(2, self.status);
  }
  for (LocationProviderStatus_Tuple *element in self.extrasArray) {
    size_ += computeMessageSize(3, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationProviderStatus*) parseFromData:(NSData*) data {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromData:data] build];
}
+ (LocationProviderStatus*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus*) parseFromInputStream:(NSInputStream*) input {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromInputStream:input] build];
}
+ (LocationProviderStatus*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromCodedInputStream:input] build];
}
+ (LocationProviderStatus*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus*)[[[LocationProviderStatus builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus_Builder*) builder {
  return [[LocationProviderStatus_Builder alloc] init];
}
+ (LocationProviderStatus_Builder*) builderWithPrototype:(LocationProviderStatus*) prototype {
  return [[LocationProviderStatus builder] mergeFrom:prototype];
}
- (LocationProviderStatus_Builder*) builder {
  return [LocationProviderStatus builder];
}
- (LocationProviderStatus_Builder*) toBuilder {
  return [LocationProviderStatus builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInt:self.status]];
  }
  for (LocationProviderStatus_Tuple* element in self.extrasArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"extras"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInt:self.status] forKey: @"status"];
  }
  for (LocationProviderStatus_Tuple* element in self.extrasArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey: @"extras"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationProviderStatus class]]) {
    return NO;
  }
  LocationProviderStatus *otherMessage = other;
  return
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.extrasArray isEqualToArray:otherMessage.extrasArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.status] hash];
  }
  for (LocationProviderStatus_Tuple* element in self.extrasArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationProviderStatus_Tuple ()
@property (strong) NSString* key;
@property (strong) NSString* value;
@end

@implementation LocationProviderStatus_Tuple

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) value_ {
  hasKey_ = !!value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
  hasValue_ = !!value_;
}
@synthesize value;
- (id) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = @"";
  }
  return self;
}
static LocationProviderStatus_Tuple* defaultLocationProviderStatus_TupleInstance = nil;
+ (void) initialize {
  if (self == [LocationProviderStatus_Tuple class]) {
    defaultLocationProviderStatus_TupleInstance = [[LocationProviderStatus_Tuple alloc] init];
  }
}
+ (LocationProviderStatus_Tuple*) defaultInstance {
  return defaultLocationProviderStatus_TupleInstance;
}
- (LocationProviderStatus_Tuple*) defaultInstance {
  return defaultLocationProviderStatus_TupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeString:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeStringSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationProviderStatus_Tuple*) parseFromData:(NSData*) data {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromData:data] build];
}
+ (LocationProviderStatus_Tuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus_Tuple*) parseFromInputStream:(NSInputStream*) input {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromInputStream:input] build];
}
+ (LocationProviderStatus_Tuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus_Tuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromCodedInputStream:input] build];
}
+ (LocationProviderStatus_Tuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderStatus_Tuple*)[[[LocationProviderStatus_Tuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderStatus_Tuple_Builder*) builder {
  return [[LocationProviderStatus_Tuple_Builder alloc] init];
}
+ (LocationProviderStatus_Tuple_Builder*) builderWithPrototype:(LocationProviderStatus_Tuple*) prototype {
  return [[LocationProviderStatus_Tuple builder] mergeFrom:prototype];
}
- (LocationProviderStatus_Tuple_Builder*) builder {
  return [LocationProviderStatus_Tuple builder];
}
- (LocationProviderStatus_Tuple_Builder*) toBuilder {
  return [LocationProviderStatus_Tuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationProviderStatus_Tuple class]]) {
    return NO;
  }
  LocationProviderStatus_Tuple *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationProviderStatus_Tuple_Builder()
@property (strong) LocationProviderStatus_Tuple* result;
@end

@implementation LocationProviderStatus_Tuple_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationProviderStatus_Tuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationProviderStatus_Tuple_Builder*) clear {
  self.result = [[LocationProviderStatus_Tuple alloc] init];
  return self;
}
- (LocationProviderStatus_Tuple_Builder*) clone {
  return [LocationProviderStatus_Tuple builderWithPrototype:result];
}
- (LocationProviderStatus_Tuple*) defaultInstance {
  return [LocationProviderStatus_Tuple defaultInstance];
}
- (LocationProviderStatus_Tuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationProviderStatus_Tuple*) buildPartial {
  LocationProviderStatus_Tuple* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationProviderStatus_Tuple_Builder*) mergeFrom:(LocationProviderStatus_Tuple*) other {
  if (other == [LocationProviderStatus_Tuple defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationProviderStatus_Tuple_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationProviderStatus_Tuple_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return result.hasKey;
}
- (NSString*) key {
  return result.key;
}
- (LocationProviderStatus_Tuple_Builder*) setKey:(NSString*) value {
  result.hasKey = YES;
  result.key = value;
  return self;
}
- (LocationProviderStatus_Tuple_Builder*) clearKey {
  result.hasKey = NO;
  result.key = @"";
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (NSString*) value {
  return result.value;
}
- (LocationProviderStatus_Tuple_Builder*) setValue:(NSString*) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (LocationProviderStatus_Tuple_Builder*) clearValue {
  result.hasValue = NO;
  result.value = @"";
  return self;
}
@end

@interface LocationProviderStatus_Builder()
@property (strong) LocationProviderStatus* result;
@end

@implementation LocationProviderStatus_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationProviderStatus alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationProviderStatus_Builder*) clear {
  self.result = [[LocationProviderStatus alloc] init];
  return self;
}
- (LocationProviderStatus_Builder*) clone {
  return [LocationProviderStatus builderWithPrototype:result];
}
- (LocationProviderStatus*) defaultInstance {
  return [LocationProviderStatus defaultInstance];
}
- (LocationProviderStatus*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationProviderStatus*) buildPartial {
  LocationProviderStatus* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationProviderStatus_Builder*) mergeFrom:(LocationProviderStatus*) other {
  if (other == [LocationProviderStatus defaultInstance]) {
    return self;
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.extrasArray.count > 0) {
    if (result.extrasArray == nil) {
      result.extrasArray = [[NSMutableArray alloc] initWithArray:other.extrasArray];
    } else {
      [result.extrasArray addObjectsFromArray:other.extrasArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationProviderStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationProviderStatus_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProvider:[input readString]];
        break;
      }
      case 16: {
        [self setStatus:[input readInt32]];
        break;
      }
      case 26: {
        LocationProviderStatus_Tuple_Builder* subBuilder = [LocationProviderStatus_Tuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExtras:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationProviderStatus_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationProviderStatus_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (int32_t) status {
  return result.status;
}
- (LocationProviderStatus_Builder*) setStatus:(int32_t) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (LocationProviderStatus_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = 0;
  return self;
}
- (NSMutableArray *)extras {
  return result.extrasArray;
}
- (LocationProviderStatus_Tuple*)extrasAtIndex:(NSUInteger)index {
  return [result extrasAtIndex:index];
}
- (LocationProviderStatus_Builder *)addExtras:(LocationProviderStatus_Tuple*)value {
  if (result.extrasArray == nil) {
    result.extrasArray = [[NSMutableArray alloc]init];
  }
  [result.extrasArray addObject:value];
  return self;
}
- (LocationProviderStatus_Builder *)setExtrasArray:(NSArray *)array {
  result.extrasArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (LocationProviderStatus_Builder *)clearExtras {
  result.extrasArray = nil;
  return self;
}
@end

@interface LocationProviderEnabled ()
@property (strong) NSString* provider;
@property BOOL enabled;
@end

@implementation LocationProviderEnabled

- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (BOOL) hasEnabled {
  return !!hasEnabled_;
}
- (void) setHasEnabled:(BOOL) value_ {
  hasEnabled_ = !!value_;
}
- (BOOL) enabled {
  return !!enabled_;
}
- (void) setEnabled:(BOOL) value {
  enabled_ = !!value;
}
- (id) init {
  if ((self = [super init])) {
    self.provider = @"";
    self.enabled = NO;
  }
  return self;
}
static LocationProviderEnabled* defaultLocationProviderEnabledInstance = nil;
+ (void) initialize {
  if (self == [LocationProviderEnabled class]) {
    defaultLocationProviderEnabledInstance = [[LocationProviderEnabled alloc] init];
  }
}
+ (LocationProviderEnabled*) defaultInstance {
  return defaultLocationProviderEnabledInstance;
}
- (LocationProviderEnabled*) defaultInstance {
  return defaultLocationProviderEnabledInstance;
}
- (BOOL) isInitialized {
  if (!self.hasProvider) {
    return NO;
  }
  if (!self.hasEnabled) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvider) {
    [output writeString:1 value:self.provider];
  }
  if (self.hasEnabled) {
    [output writeBool:2 value:self.enabled];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvider) {
    size_ += computeStringSize(1, self.provider);
  }
  if (self.hasEnabled) {
    size_ += computeBoolSize(2, self.enabled);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationProviderEnabled*) parseFromData:(NSData*) data {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromData:data] build];
}
+ (LocationProviderEnabled*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderEnabled*) parseFromInputStream:(NSInputStream*) input {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromInputStream:input] build];
}
+ (LocationProviderEnabled*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderEnabled*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromCodedInputStream:input] build];
}
+ (LocationProviderEnabled*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationProviderEnabled*)[[[LocationProviderEnabled builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationProviderEnabled_Builder*) builder {
  return [[LocationProviderEnabled_Builder alloc] init];
}
+ (LocationProviderEnabled_Builder*) builderWithPrototype:(LocationProviderEnabled*) prototype {
  return [[LocationProviderEnabled builder] mergeFrom:prototype];
}
- (LocationProviderEnabled_Builder*) builder {
  return [LocationProviderEnabled builder];
}
- (LocationProviderEnabled_Builder*) toBuilder {
  return [LocationProviderEnabled builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  if (self.hasEnabled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enabled", [NSNumber numberWithBool:self.enabled]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  if (self.hasEnabled) {
    [dictionary setObject: [NSNumber numberWithBool:self.enabled] forKey: @"enabled"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationProviderEnabled class]]) {
    return NO;
  }
  LocationProviderEnabled *otherMessage = other;
  return
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      self.hasEnabled == otherMessage.hasEnabled &&
      (!self.hasEnabled || self.enabled == otherMessage.enabled) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  if (self.hasEnabled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enabled] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationProviderEnabled_Builder()
@property (strong) LocationProviderEnabled* result;
@end

@implementation LocationProviderEnabled_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationProviderEnabled alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationProviderEnabled_Builder*) clear {
  self.result = [[LocationProviderEnabled alloc] init];
  return self;
}
- (LocationProviderEnabled_Builder*) clone {
  return [LocationProviderEnabled builderWithPrototype:result];
}
- (LocationProviderEnabled*) defaultInstance {
  return [LocationProviderEnabled defaultInstance];
}
- (LocationProviderEnabled*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationProviderEnabled*) buildPartial {
  LocationProviderEnabled* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationProviderEnabled_Builder*) mergeFrom:(LocationProviderEnabled*) other {
  if (other == [LocationProviderEnabled defaultInstance]) {
    return self;
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.hasEnabled) {
    [self setEnabled:other.enabled];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationProviderEnabled_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationProviderEnabled_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProvider:[input readString]];
        break;
      }
      case 16: {
        [self setEnabled:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationProviderEnabled_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationProviderEnabled_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
- (BOOL) hasEnabled {
  return result.hasEnabled;
}
- (BOOL) enabled {
  return result.enabled;
}
- (LocationProviderEnabled_Builder*) setEnabled:(BOOL) value {
  result.hasEnabled = YES;
  result.enabled = value;
  return self;
}
- (LocationProviderEnabled_Builder*) clearEnabled {
  result.hasEnabled = NO;
  result.enabled = NO;
  return self;
}
@end

@interface LocationUpdate ()
@property Float64 latitude;
@property Float64 longitude;
@property int64_t time;
@property (strong) NSString* provider;
@property Float32 accuracy;
@property Float64 altitude;
@property Float32 bearing;
@property Float32 speed;
@end

@implementation LocationUpdate

- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value_ {
  hasLatitude_ = !!value_;
}
@synthesize latitude;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value_ {
  hasLongitude_ = !!value_;
}
@synthesize longitude;
- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value_ {
  hasTime_ = !!value_;
}
@synthesize time;
- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (BOOL) hasAccuracy {
  return !!hasAccuracy_;
}
- (void) setHasAccuracy:(BOOL) value_ {
  hasAccuracy_ = !!value_;
}
@synthesize accuracy;
- (BOOL) hasAltitude {
  return !!hasAltitude_;
}
- (void) setHasAltitude:(BOOL) value_ {
  hasAltitude_ = !!value_;
}
@synthesize altitude;
- (BOOL) hasBearing {
  return !!hasBearing_;
}
- (void) setHasBearing:(BOOL) value_ {
  hasBearing_ = !!value_;
}
@synthesize bearing;
- (BOOL) hasSpeed {
  return !!hasSpeed_;
}
- (void) setHasSpeed:(BOOL) value_ {
  hasSpeed_ = !!value_;
}
@synthesize speed;
- (id) init {
  if ((self = [super init])) {
    self.latitude = 0;
    self.longitude = 0;
    self.time = 0L;
    self.provider = @"";
    self.accuracy = 0;
    self.altitude = 0;
    self.bearing = 0;
    self.speed = 0;
  }
  return self;
}
static LocationUpdate* defaultLocationUpdateInstance = nil;
+ (void) initialize {
  if (self == [LocationUpdate class]) {
    defaultLocationUpdateInstance = [[LocationUpdate alloc] init];
  }
}
+ (LocationUpdate*) defaultInstance {
  return defaultLocationUpdateInstance;
}
- (LocationUpdate*) defaultInstance {
  return defaultLocationUpdateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLatitude) {
    return NO;
  }
  if (!self.hasLongitude) {
    return NO;
  }
  if (!self.hasTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatitude) {
    [output writeDouble:1 value:self.latitude];
  }
  if (self.hasLongitude) {
    [output writeDouble:2 value:self.longitude];
  }
  if (self.hasTime) {
    [output writeInt64:3 value:self.time];
  }
  if (self.hasProvider) {
    [output writeString:4 value:self.provider];
  }
  if (self.hasAccuracy) {
    [output writeFloat:5 value:self.accuracy];
  }
  if (self.hasAltitude) {
    [output writeDouble:6 value:self.altitude];
  }
  if (self.hasBearing) {
    [output writeFloat:7 value:self.bearing];
  }
  if (self.hasSpeed) {
    [output writeFloat:8 value:self.speed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLatitude) {
    size_ += computeDoubleSize(1, self.latitude);
  }
  if (self.hasLongitude) {
    size_ += computeDoubleSize(2, self.longitude);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(3, self.time);
  }
  if (self.hasProvider) {
    size_ += computeStringSize(4, self.provider);
  }
  if (self.hasAccuracy) {
    size_ += computeFloatSize(5, self.accuracy);
  }
  if (self.hasAltitude) {
    size_ += computeDoubleSize(6, self.altitude);
  }
  if (self.hasBearing) {
    size_ += computeFloatSize(7, self.bearing);
  }
  if (self.hasSpeed) {
    size_ += computeFloatSize(8, self.speed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationUpdate*) parseFromData:(NSData*) data {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromData:data] build];
}
+ (LocationUpdate*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationUpdate*) parseFromInputStream:(NSInputStream*) input {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromInputStream:input] build];
}
+ (LocationUpdate*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromCodedInputStream:input] build];
}
+ (LocationUpdate*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUpdate*)[[[LocationUpdate builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationUpdate_Builder*) builder {
  return [[LocationUpdate_Builder alloc] init];
}
+ (LocationUpdate_Builder*) builderWithPrototype:(LocationUpdate*) prototype {
  return [[LocationUpdate builder] mergeFrom:prototype];
}
- (LocationUpdate_Builder*) builder {
  return [LocationUpdate builder];
}
- (LocationUpdate_Builder*) toBuilder {
  return [LocationUpdate builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithDouble:self.latitude]];
  }
  if (self.hasLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longitude", [NSNumber numberWithDouble:self.longitude]];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  if (self.hasAccuracy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"accuracy", [NSNumber numberWithFloat:self.accuracy]];
  }
  if (self.hasAltitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"altitude", [NSNumber numberWithDouble:self.altitude]];
  }
  if (self.hasBearing) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bearing", [NSNumber numberWithFloat:self.bearing]];
  }
  if (self.hasSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speed", [NSNumber numberWithFloat:self.speed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.latitude] forKey: @"latitude"];
  }
  if (self.hasLongitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.longitude] forKey: @"longitude"];
  }
  if (self.hasTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.time] forKey: @"time"];
  }
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  if (self.hasAccuracy) {
    [dictionary setObject: [NSNumber numberWithFloat:self.accuracy] forKey: @"accuracy"];
  }
  if (self.hasAltitude) {
    [dictionary setObject: [NSNumber numberWithDouble:self.altitude] forKey: @"altitude"];
  }
  if (self.hasBearing) {
    [dictionary setObject: [NSNumber numberWithFloat:self.bearing] forKey: @"bearing"];
  }
  if (self.hasSpeed) {
    [dictionary setObject: [NSNumber numberWithFloat:self.speed] forKey: @"speed"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationUpdate class]]) {
    return NO;
  }
  LocationUpdate *otherMessage = other;
  return
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasLongitude == otherMessage.hasLongitude &&
      (!self.hasLongitude || self.longitude == otherMessage.longitude) &&
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      self.hasAccuracy == otherMessage.hasAccuracy &&
      (!self.hasAccuracy || self.accuracy == otherMessage.accuracy) &&
      self.hasAltitude == otherMessage.hasAltitude &&
      (!self.hasAltitude || self.altitude == otherMessage.altitude) &&
      self.hasBearing == otherMessage.hasBearing &&
      (!self.hasBearing || self.bearing == otherMessage.bearing) &&
      self.hasSpeed == otherMessage.hasSpeed &&
      (!self.hasSpeed || self.speed == otherMessage.speed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.latitude] hash];
  }
  if (self.hasLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.longitude] hash];
  }
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.time] hash];
  }
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  if (self.hasAccuracy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.accuracy] hash];
  }
  if (self.hasAltitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.altitude] hash];
  }
  if (self.hasBearing) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.bearing] hash];
  }
  if (self.hasSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.speed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationUpdate_Builder()
@property (strong) LocationUpdate* result;
@end

@implementation LocationUpdate_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationUpdate alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationUpdate_Builder*) clear {
  self.result = [[LocationUpdate alloc] init];
  return self;
}
- (LocationUpdate_Builder*) clone {
  return [LocationUpdate builderWithPrototype:result];
}
- (LocationUpdate*) defaultInstance {
  return [LocationUpdate defaultInstance];
}
- (LocationUpdate*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationUpdate*) buildPartial {
  LocationUpdate* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationUpdate_Builder*) mergeFrom:(LocationUpdate*) other {
  if (other == [LocationUpdate defaultInstance]) {
    return self;
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.hasAccuracy) {
    [self setAccuracy:other.accuracy];
  }
  if (other.hasAltitude) {
    [self setAltitude:other.altitude];
  }
  if (other.hasBearing) {
    [self setBearing:other.bearing];
  }
  if (other.hasSpeed) {
    [self setSpeed:other.speed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationUpdate_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLatitude:[input readDouble]];
        break;
      }
      case 17: {
        [self setLongitude:[input readDouble]];
        break;
      }
      case 24: {
        [self setTime:[input readInt64]];
        break;
      }
      case 34: {
        [self setProvider:[input readString]];
        break;
      }
      case 45: {
        [self setAccuracy:[input readFloat]];
        break;
      }
      case 49: {
        [self setAltitude:[input readDouble]];
        break;
      }
      case 61: {
        [self setBearing:[input readFloat]];
        break;
      }
      case 69: {
        [self setSpeed:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (Float64) latitude {
  return result.latitude;
}
- (LocationUpdate_Builder*) setLatitude:(Float64) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (LocationUpdate_Builder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = 0;
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (Float64) longitude {
  return result.longitude;
}
- (LocationUpdate_Builder*) setLongitude:(Float64) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (LocationUpdate_Builder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = 0;
  return self;
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (int64_t) time {
  return result.time;
}
- (LocationUpdate_Builder*) setTime:(int64_t) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (LocationUpdate_Builder*) clearTime {
  result.hasTime = NO;
  result.time = 0L;
  return self;
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationUpdate_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationUpdate_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
- (BOOL) hasAccuracy {
  return result.hasAccuracy;
}
- (Float32) accuracy {
  return result.accuracy;
}
- (LocationUpdate_Builder*) setAccuracy:(Float32) value {
  result.hasAccuracy = YES;
  result.accuracy = value;
  return self;
}
- (LocationUpdate_Builder*) clearAccuracy {
  result.hasAccuracy = NO;
  result.accuracy = 0;
  return self;
}
- (BOOL) hasAltitude {
  return result.hasAltitude;
}
- (Float64) altitude {
  return result.altitude;
}
- (LocationUpdate_Builder*) setAltitude:(Float64) value {
  result.hasAltitude = YES;
  result.altitude = value;
  return self;
}
- (LocationUpdate_Builder*) clearAltitude {
  result.hasAltitude = NO;
  result.altitude = 0;
  return self;
}
- (BOOL) hasBearing {
  return result.hasBearing;
}
- (Float32) bearing {
  return result.bearing;
}
- (LocationUpdate_Builder*) setBearing:(Float32) value {
  result.hasBearing = YES;
  result.bearing = value;
  return self;
}
- (LocationUpdate_Builder*) clearBearing {
  result.hasBearing = NO;
  result.bearing = 0;
  return self;
}
- (BOOL) hasSpeed {
  return result.hasSpeed;
}
- (Float32) speed {
  return result.speed;
}
- (LocationUpdate_Builder*) setSpeed:(Float32) value {
  result.hasSpeed = YES;
  result.speed = value;
  return self;
}
- (LocationUpdate_Builder*) clearSpeed {
  result.hasSpeed = NO;
  result.speed = 0;
  return self;
}
@end

@interface LocationRequest ()
@property LocationRequest_LocationRequestType type;
@property (strong) LocationProviderInfo* providerInfo;
@property (strong) LocationProviderStatus* providerStatus;
@property (strong) LocationProviderEnabled* providerEnabled;
@property (strong) LocationUpdate* update;
@end

@implementation LocationRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasProviderInfo {
  return !!hasProviderInfo_;
}
- (void) setHasProviderInfo:(BOOL) value_ {
  hasProviderInfo_ = !!value_;
}
@synthesize providerInfo;
- (BOOL) hasProviderStatus {
  return !!hasProviderStatus_;
}
- (void) setHasProviderStatus:(BOOL) value_ {
  hasProviderStatus_ = !!value_;
}
@synthesize providerStatus;
- (BOOL) hasProviderEnabled {
  return !!hasProviderEnabled_;
}
- (void) setHasProviderEnabled:(BOOL) value_ {
  hasProviderEnabled_ = !!value_;
}
@synthesize providerEnabled;
- (BOOL) hasUpdate {
  return !!hasUpdate_;
}
- (void) setHasUpdate:(BOOL) value_ {
  hasUpdate_ = !!value_;
}
@synthesize update;
- (id) init {
  if ((self = [super init])) {
    self.type = LocationRequest_LocationRequestTypeProviderinfo;
    self.providerInfo = [LocationProviderInfo defaultInstance];
    self.providerStatus = [LocationProviderStatus defaultInstance];
    self.providerEnabled = [LocationProviderEnabled defaultInstance];
    self.update = [LocationUpdate defaultInstance];
  }
  return self;
}
static LocationRequest* defaultLocationRequestInstance = nil;
+ (void) initialize {
  if (self == [LocationRequest class]) {
    defaultLocationRequestInstance = [[LocationRequest alloc] init];
  }
}
+ (LocationRequest*) defaultInstance {
  return defaultLocationRequestInstance;
}
- (LocationRequest*) defaultInstance {
  return defaultLocationRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasProviderInfo) {
    if (!self.providerInfo.isInitialized) {
      return NO;
    }
  }
  if (self.hasProviderStatus) {
    if (!self.providerStatus.isInitialized) {
      return NO;
    }
  }
  if (self.hasProviderEnabled) {
    if (!self.providerEnabled.isInitialized) {
      return NO;
    }
  }
  if (self.hasUpdate) {
    if (!self.update.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasProviderInfo) {
    [output writeMessage:2 value:self.providerInfo];
  }
  if (self.hasProviderStatus) {
    [output writeMessage:3 value:self.providerStatus];
  }
  if (self.hasProviderEnabled) {
    [output writeMessage:4 value:self.providerEnabled];
  }
  if (self.hasUpdate) {
    [output writeMessage:5 value:self.update];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasProviderInfo) {
    size_ += computeMessageSize(2, self.providerInfo);
  }
  if (self.hasProviderStatus) {
    size_ += computeMessageSize(3, self.providerStatus);
  }
  if (self.hasProviderEnabled) {
    size_ += computeMessageSize(4, self.providerEnabled);
  }
  if (self.hasUpdate) {
    size_ += computeMessageSize(5, self.update);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationRequest*) parseFromData:(NSData*) data {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromData:data] build];
}
+ (LocationRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationRequest*) parseFromInputStream:(NSInputStream*) input {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromInputStream:input] build];
}
+ (LocationRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromCodedInputStream:input] build];
}
+ (LocationRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationRequest*)[[[LocationRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationRequest_Builder*) builder {
  return [[LocationRequest_Builder alloc] init];
}
+ (LocationRequest_Builder*) builderWithPrototype:(LocationRequest*) prototype {
  return [[LocationRequest builder] mergeFrom:prototype];
}
- (LocationRequest_Builder*) builder {
  return [LocationRequest builder];
}
- (LocationRequest_Builder*) toBuilder {
  return [LocationRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasProviderInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"providerInfo"];
    [self.providerInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProviderStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"providerStatus"];
    [self.providerStatus writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProviderEnabled) {
    [output appendFormat:@"%@%@ {\n", indent, @"providerEnabled"];
    [self.providerEnabled writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUpdate) {
    [output appendFormat:@"%@%@ {\n", indent, @"update"];
    [self.update writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasProviderInfo) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.providerInfo storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"providerInfo"];
  }
  if (self.hasProviderStatus) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.providerStatus storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"providerStatus"];
  }
  if (self.hasProviderEnabled) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.providerEnabled storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"providerEnabled"];
  }
  if (self.hasUpdate) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.update storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"update"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationRequest class]]) {
    return NO;
  }
  LocationRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasProviderInfo == otherMessage.hasProviderInfo &&
      (!self.hasProviderInfo || [self.providerInfo isEqual:otherMessage.providerInfo]) &&
      self.hasProviderStatus == otherMessage.hasProviderStatus &&
      (!self.hasProviderStatus || [self.providerStatus isEqual:otherMessage.providerStatus]) &&
      self.hasProviderEnabled == otherMessage.hasProviderEnabled &&
      (!self.hasProviderEnabled || [self.providerEnabled isEqual:otherMessage.providerEnabled]) &&
      self.hasUpdate == otherMessage.hasUpdate &&
      (!self.hasUpdate || [self.update isEqual:otherMessage.update]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasProviderInfo) {
    hashCode = hashCode * 31 + [self.providerInfo hash];
  }
  if (self.hasProviderStatus) {
    hashCode = hashCode * 31 + [self.providerStatus hash];
  }
  if (self.hasProviderEnabled) {
    hashCode = hashCode * 31 + [self.providerEnabled hash];
  }
  if (self.hasUpdate) {
    hashCode = hashCode * 31 + [self.update hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL LocationRequest_LocationRequestTypeIsValidValue(LocationRequest_LocationRequestType value) {
  switch (value) {
    case LocationRequest_LocationRequestTypeProviderinfo:
    case LocationRequest_LocationRequestTypeProviderstatus:
    case LocationRequest_LocationRequestTypeProviderenabled:
    case LocationRequest_LocationRequestTypeLocationupdate:
      return YES;
    default:
      return NO;
  }
}
@interface LocationRequest_Builder()
@property (strong) LocationRequest* result;
@end

@implementation LocationRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationRequest_Builder*) clear {
  self.result = [[LocationRequest alloc] init];
  return self;
}
- (LocationRequest_Builder*) clone {
  return [LocationRequest builderWithPrototype:result];
}
- (LocationRequest*) defaultInstance {
  return [LocationRequest defaultInstance];
}
- (LocationRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationRequest*) buildPartial {
  LocationRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationRequest_Builder*) mergeFrom:(LocationRequest*) other {
  if (other == [LocationRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasProviderInfo) {
    [self mergeProviderInfo:other.providerInfo];
  }
  if (other.hasProviderStatus) {
    [self mergeProviderStatus:other.providerStatus];
  }
  if (other.hasProviderEnabled) {
    [self mergeProviderEnabled:other.providerEnabled];
  }
  if (other.hasUpdate) {
    [self mergeUpdate:other.update];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (LocationRequest_LocationRequestTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        LocationProviderInfo_Builder* subBuilder = [LocationProviderInfo builder];
        if (self.hasProviderInfo) {
          [subBuilder mergeFrom:self.providerInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProviderInfo:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        LocationProviderStatus_Builder* subBuilder = [LocationProviderStatus builder];
        if (self.hasProviderStatus) {
          [subBuilder mergeFrom:self.providerStatus];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProviderStatus:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        LocationProviderEnabled_Builder* subBuilder = [LocationProviderEnabled builder];
        if (self.hasProviderEnabled) {
          [subBuilder mergeFrom:self.providerEnabled];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setProviderEnabled:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        LocationUpdate_Builder* subBuilder = [LocationUpdate builder];
        if (self.hasUpdate) {
          [subBuilder mergeFrom:self.update];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUpdate:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (LocationRequest_LocationRequestType) type {
  return result.type;
}
- (LocationRequest_Builder*) setType:(LocationRequest_LocationRequestType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (LocationRequest_Builder*) clearType {
  result.hasType = NO;
  result.type = LocationRequest_LocationRequestTypeProviderinfo;
  return self;
}
- (BOOL) hasProviderInfo {
  return result.hasProviderInfo;
}
- (LocationProviderInfo*) providerInfo {
  return result.providerInfo;
}
- (LocationRequest_Builder*) setProviderInfo:(LocationProviderInfo*) value {
  result.hasProviderInfo = YES;
  result.providerInfo = value;
  return self;
}
- (LocationRequest_Builder*) setProviderInfoBuilder:(LocationProviderInfo_Builder*) builderForValue {
  return [self setProviderInfo:[builderForValue build]];
}
- (LocationRequest_Builder*) mergeProviderInfo:(LocationProviderInfo*) value {
  if (result.hasProviderInfo &&
      result.providerInfo != [LocationProviderInfo defaultInstance]) {
    result.providerInfo =
      [[[LocationProviderInfo builderWithPrototype:result.providerInfo] mergeFrom:value] buildPartial];
  } else {
    result.providerInfo = value;
  }
  result.hasProviderInfo = YES;
  return self;
}
- (LocationRequest_Builder*) clearProviderInfo {
  result.hasProviderInfo = NO;
  result.providerInfo = [LocationProviderInfo defaultInstance];
  return self;
}
- (BOOL) hasProviderStatus {
  return result.hasProviderStatus;
}
- (LocationProviderStatus*) providerStatus {
  return result.providerStatus;
}
- (LocationRequest_Builder*) setProviderStatus:(LocationProviderStatus*) value {
  result.hasProviderStatus = YES;
  result.providerStatus = value;
  return self;
}
- (LocationRequest_Builder*) setProviderStatusBuilder:(LocationProviderStatus_Builder*) builderForValue {
  return [self setProviderStatus:[builderForValue build]];
}
- (LocationRequest_Builder*) mergeProviderStatus:(LocationProviderStatus*) value {
  if (result.hasProviderStatus &&
      result.providerStatus != [LocationProviderStatus defaultInstance]) {
    result.providerStatus =
      [[[LocationProviderStatus builderWithPrototype:result.providerStatus] mergeFrom:value] buildPartial];
  } else {
    result.providerStatus = value;
  }
  result.hasProviderStatus = YES;
  return self;
}
- (LocationRequest_Builder*) clearProviderStatus {
  result.hasProviderStatus = NO;
  result.providerStatus = [LocationProviderStatus defaultInstance];
  return self;
}
- (BOOL) hasProviderEnabled {
  return result.hasProviderEnabled;
}
- (LocationProviderEnabled*) providerEnabled {
  return result.providerEnabled;
}
- (LocationRequest_Builder*) setProviderEnabled:(LocationProviderEnabled*) value {
  result.hasProviderEnabled = YES;
  result.providerEnabled = value;
  return self;
}
- (LocationRequest_Builder*) setProviderEnabledBuilder:(LocationProviderEnabled_Builder*) builderForValue {
  return [self setProviderEnabled:[builderForValue build]];
}
- (LocationRequest_Builder*) mergeProviderEnabled:(LocationProviderEnabled*) value {
  if (result.hasProviderEnabled &&
      result.providerEnabled != [LocationProviderEnabled defaultInstance]) {
    result.providerEnabled =
      [[[LocationProviderEnabled builderWithPrototype:result.providerEnabled] mergeFrom:value] buildPartial];
  } else {
    result.providerEnabled = value;
  }
  result.hasProviderEnabled = YES;
  return self;
}
- (LocationRequest_Builder*) clearProviderEnabled {
  result.hasProviderEnabled = NO;
  result.providerEnabled = [LocationProviderEnabled defaultInstance];
  return self;
}
- (BOOL) hasUpdate {
  return result.hasUpdate;
}
- (LocationUpdate*) update {
  return result.update;
}
- (LocationRequest_Builder*) setUpdate:(LocationUpdate*) value {
  result.hasUpdate = YES;
  result.update = value;
  return self;
}
- (LocationRequest_Builder*) setUpdateBuilder:(LocationUpdate_Builder*) builderForValue {
  return [self setUpdate:[builderForValue build]];
}
- (LocationRequest_Builder*) mergeUpdate:(LocationUpdate*) value {
  if (result.hasUpdate &&
      result.update != [LocationUpdate defaultInstance]) {
    result.update =
      [[[LocationUpdate builderWithPrototype:result.update] mergeFrom:value] buildPartial];
  } else {
    result.update = value;
  }
  result.hasUpdate = YES;
  return self;
}
- (LocationRequest_Builder*) clearUpdate {
  result.hasUpdate = NO;
  result.update = [LocationUpdate defaultInstance];
  return self;
}
@end

@interface LocationSubscribe ()
@property LocationSubscribe_LocationSubscribeType type;
@property (strong) NSString* provider;
@property int64_t minTime;
@property Float32 minDistance;
@end

@implementation LocationSubscribe

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (BOOL) hasMinTime {
  return !!hasMinTime_;
}
- (void) setHasMinTime:(BOOL) value_ {
  hasMinTime_ = !!value_;
}
@synthesize minTime;
- (BOOL) hasMinDistance {
  return !!hasMinDistance_;
}
- (void) setHasMinDistance:(BOOL) value_ {
  hasMinDistance_ = !!value_;
}
@synthesize minDistance;
- (id) init {
  if ((self = [super init])) {
    self.type = LocationSubscribe_LocationSubscribeTypeSingleUpdate;
    self.provider = @"";
    self.minTime = 0L;
    self.minDistance = 0;
  }
  return self;
}
static LocationSubscribe* defaultLocationSubscribeInstance = nil;
+ (void) initialize {
  if (self == [LocationSubscribe class]) {
    defaultLocationSubscribeInstance = [[LocationSubscribe alloc] init];
  }
}
+ (LocationSubscribe*) defaultInstance {
  return defaultLocationSubscribeInstance;
}
- (LocationSubscribe*) defaultInstance {
  return defaultLocationSubscribeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasProvider) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasProvider) {
    [output writeString:2 value:self.provider];
  }
  if (self.hasMinTime) {
    [output writeInt64:3 value:self.minTime];
  }
  if (self.hasMinDistance) {
    [output writeFloat:4 value:self.minDistance];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasProvider) {
    size_ += computeStringSize(2, self.provider);
  }
  if (self.hasMinTime) {
    size_ += computeInt64Size(3, self.minTime);
  }
  if (self.hasMinDistance) {
    size_ += computeFloatSize(4, self.minDistance);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationSubscribe*) parseFromData:(NSData*) data {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromData:data] build];
}
+ (LocationSubscribe*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationSubscribe*) parseFromInputStream:(NSInputStream*) input {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromInputStream:input] build];
}
+ (LocationSubscribe*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationSubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromCodedInputStream:input] build];
}
+ (LocationSubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationSubscribe*)[[[LocationSubscribe builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationSubscribe_Builder*) builder {
  return [[LocationSubscribe_Builder alloc] init];
}
+ (LocationSubscribe_Builder*) builderWithPrototype:(LocationSubscribe*) prototype {
  return [[LocationSubscribe builder] mergeFrom:prototype];
}
- (LocationSubscribe_Builder*) builder {
  return [LocationSubscribe builder];
}
- (LocationSubscribe_Builder*) toBuilder {
  return [LocationSubscribe builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  if (self.hasMinTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minTime", [NSNumber numberWithLongLong:self.minTime]];
  }
  if (self.hasMinDistance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minDistance", [NSNumber numberWithFloat:self.minDistance]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  if (self.hasMinTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.minTime] forKey: @"minTime"];
  }
  if (self.hasMinDistance) {
    [dictionary setObject: [NSNumber numberWithFloat:self.minDistance] forKey: @"minDistance"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationSubscribe class]]) {
    return NO;
  }
  LocationSubscribe *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      self.hasMinTime == otherMessage.hasMinTime &&
      (!self.hasMinTime || self.minTime == otherMessage.minTime) &&
      self.hasMinDistance == otherMessage.hasMinDistance &&
      (!self.hasMinDistance || self.minDistance == otherMessage.minDistance) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  if (self.hasMinTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.minTime] hash];
  }
  if (self.hasMinDistance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.minDistance] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL LocationSubscribe_LocationSubscribeTypeIsValidValue(LocationSubscribe_LocationSubscribeType value) {
  switch (value) {
    case LocationSubscribe_LocationSubscribeTypeSingleUpdate:
    case LocationSubscribe_LocationSubscribeTypeMultipleUpdates:
      return YES;
    default:
      return NO;
  }
}
@interface LocationSubscribe_Builder()
@property (strong) LocationSubscribe* result;
@end

@implementation LocationSubscribe_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationSubscribe alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationSubscribe_Builder*) clear {
  self.result = [[LocationSubscribe alloc] init];
  return self;
}
- (LocationSubscribe_Builder*) clone {
  return [LocationSubscribe builderWithPrototype:result];
}
- (LocationSubscribe*) defaultInstance {
  return [LocationSubscribe defaultInstance];
}
- (LocationSubscribe*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationSubscribe*) buildPartial {
  LocationSubscribe* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationSubscribe_Builder*) mergeFrom:(LocationSubscribe*) other {
  if (other == [LocationSubscribe defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  if (other.hasMinTime) {
    [self setMinTime:other.minTime];
  }
  if (other.hasMinDistance) {
    [self setMinDistance:other.minDistance];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationSubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationSubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (LocationSubscribe_LocationSubscribeTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setProvider:[input readString]];
        break;
      }
      case 24: {
        [self setMinTime:[input readInt64]];
        break;
      }
      case 37: {
        [self setMinDistance:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (LocationSubscribe_LocationSubscribeType) type {
  return result.type;
}
- (LocationSubscribe_Builder*) setType:(LocationSubscribe_LocationSubscribeType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (LocationSubscribe_Builder*) clearType {
  result.hasType = NO;
  result.type = LocationSubscribe_LocationSubscribeTypeSingleUpdate;
  return self;
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationSubscribe_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationSubscribe_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
- (BOOL) hasMinTime {
  return result.hasMinTime;
}
- (int64_t) minTime {
  return result.minTime;
}
- (LocationSubscribe_Builder*) setMinTime:(int64_t) value {
  result.hasMinTime = YES;
  result.minTime = value;
  return self;
}
- (LocationSubscribe_Builder*) clearMinTime {
  result.hasMinTime = NO;
  result.minTime = 0L;
  return self;
}
- (BOOL) hasMinDistance {
  return result.hasMinDistance;
}
- (Float32) minDistance {
  return result.minDistance;
}
- (LocationSubscribe_Builder*) setMinDistance:(Float32) value {
  result.hasMinDistance = YES;
  result.minDistance = value;
  return self;
}
- (LocationSubscribe_Builder*) clearMinDistance {
  result.hasMinDistance = NO;
  result.minDistance = 0;
  return self;
}
@end

@interface LocationUnsubscribe ()
@property (strong) NSString* provider;
@end

@implementation LocationUnsubscribe

- (BOOL) hasProvider {
  return !!hasProvider_;
}
- (void) setHasProvider:(BOOL) value_ {
  hasProvider_ = !!value_;
}
@synthesize provider;
- (id) init {
  if ((self = [super init])) {
    self.provider = @"";
  }
  return self;
}
static LocationUnsubscribe* defaultLocationUnsubscribeInstance = nil;
+ (void) initialize {
  if (self == [LocationUnsubscribe class]) {
    defaultLocationUnsubscribeInstance = [[LocationUnsubscribe alloc] init];
  }
}
+ (LocationUnsubscribe*) defaultInstance {
  return defaultLocationUnsubscribeInstance;
}
- (LocationUnsubscribe*) defaultInstance {
  return defaultLocationUnsubscribeInstance;
}
- (BOOL) isInitialized {
  if (!self.hasProvider) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProvider) {
    [output writeString:1 value:self.provider];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasProvider) {
    size_ += computeStringSize(1, self.provider);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationUnsubscribe*) parseFromData:(NSData*) data {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromData:data] build];
}
+ (LocationUnsubscribe*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationUnsubscribe*) parseFromInputStream:(NSInputStream*) input {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromInputStream:input] build];
}
+ (LocationUnsubscribe*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationUnsubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromCodedInputStream:input] build];
}
+ (LocationUnsubscribe*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationUnsubscribe*)[[[LocationUnsubscribe builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationUnsubscribe_Builder*) builder {
  return [[LocationUnsubscribe_Builder alloc] init];
}
+ (LocationUnsubscribe_Builder*) builderWithPrototype:(LocationUnsubscribe*) prototype {
  return [[LocationUnsubscribe builder] mergeFrom:prototype];
}
- (LocationUnsubscribe_Builder*) builder {
  return [LocationUnsubscribe builder];
}
- (LocationUnsubscribe_Builder*) toBuilder {
  return [LocationUnsubscribe builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProvider) {
    [output appendFormat:@"%@%@: %@\n", indent, @"provider", self.provider];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasProvider) {
    [dictionary setObject: self.provider forKey: @"provider"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationUnsubscribe class]]) {
    return NO;
  }
  LocationUnsubscribe *otherMessage = other;
  return
      self.hasProvider == otherMessage.hasProvider &&
      (!self.hasProvider || [self.provider isEqual:otherMessage.provider]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasProvider) {
    hashCode = hashCode * 31 + [self.provider hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LocationUnsubscribe_Builder()
@property (strong) LocationUnsubscribe* result;
@end

@implementation LocationUnsubscribe_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationUnsubscribe alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationUnsubscribe_Builder*) clear {
  self.result = [[LocationUnsubscribe alloc] init];
  return self;
}
- (LocationUnsubscribe_Builder*) clone {
  return [LocationUnsubscribe builderWithPrototype:result];
}
- (LocationUnsubscribe*) defaultInstance {
  return [LocationUnsubscribe defaultInstance];
}
- (LocationUnsubscribe*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationUnsubscribe*) buildPartial {
  LocationUnsubscribe* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationUnsubscribe_Builder*) mergeFrom:(LocationUnsubscribe*) other {
  if (other == [LocationUnsubscribe defaultInstance]) {
    return self;
  }
  if (other.hasProvider) {
    [self setProvider:other.provider];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationUnsubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationUnsubscribe_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setProvider:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasProvider {
  return result.hasProvider;
}
- (NSString*) provider {
  return result.provider;
}
- (LocationUnsubscribe_Builder*) setProvider:(NSString*) value {
  result.hasProvider = YES;
  result.provider = value;
  return self;
}
- (LocationUnsubscribe_Builder*) clearProvider {
  result.hasProvider = NO;
  result.provider = @"";
  return self;
}
@end

@interface LocationResponse ()
@property LocationResponse_LocationResponseType type;
@property (strong) LocationSubscribe* subscribe;
@property (strong) LocationUnsubscribe* unsubscribe;
@end

@implementation LocationResponse

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasSubscribe {
  return !!hasSubscribe_;
}
- (void) setHasSubscribe:(BOOL) value_ {
  hasSubscribe_ = !!value_;
}
@synthesize subscribe;
- (BOOL) hasUnsubscribe {
  return !!hasUnsubscribe_;
}
- (void) setHasUnsubscribe:(BOOL) value_ {
  hasUnsubscribe_ = !!value_;
}
@synthesize unsubscribe;
- (id) init {
  if ((self = [super init])) {
    self.type = LocationResponse_LocationResponseTypeSubscribe;
    self.subscribe = [LocationSubscribe defaultInstance];
    self.unsubscribe = [LocationUnsubscribe defaultInstance];
  }
  return self;
}
static LocationResponse* defaultLocationResponseInstance = nil;
+ (void) initialize {
  if (self == [LocationResponse class]) {
    defaultLocationResponseInstance = [[LocationResponse alloc] init];
  }
}
+ (LocationResponse*) defaultInstance {
  return defaultLocationResponseInstance;
}
- (LocationResponse*) defaultInstance {
  return defaultLocationResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasSubscribe) {
    if (!self.subscribe.isInitialized) {
      return NO;
    }
  }
  if (self.hasUnsubscribe) {
    if (!self.unsubscribe.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasSubscribe) {
    [output writeMessage:2 value:self.subscribe];
  }
  if (self.hasUnsubscribe) {
    [output writeMessage:3 value:self.unsubscribe];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasSubscribe) {
    size_ += computeMessageSize(2, self.subscribe);
  }
  if (self.hasUnsubscribe) {
    size_ += computeMessageSize(3, self.unsubscribe);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LocationResponse*) parseFromData:(NSData*) data {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromData:data] build];
}
+ (LocationResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LocationResponse*) parseFromInputStream:(NSInputStream*) input {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromInputStream:input] build];
}
+ (LocationResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromCodedInputStream:input] build];
}
+ (LocationResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LocationResponse*)[[[LocationResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LocationResponse_Builder*) builder {
  return [[LocationResponse_Builder alloc] init];
}
+ (LocationResponse_Builder*) builderWithPrototype:(LocationResponse*) prototype {
  return [[LocationResponse builder] mergeFrom:prototype];
}
- (LocationResponse_Builder*) builder {
  return [LocationResponse builder];
}
- (LocationResponse_Builder*) toBuilder {
  return [LocationResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasSubscribe) {
    [output appendFormat:@"%@%@ {\n", indent, @"subscribe"];
    [self.subscribe writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnsubscribe) {
    [output appendFormat:@"%@%@ {\n", indent, @"unsubscribe"];
    [self.unsubscribe writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasSubscribe) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.subscribe storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"subscribe"];
  }
  if (self.hasUnsubscribe) {
    NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary];
    [self.unsubscribe storeInDictionary:messageDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unsubscribe"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LocationResponse class]]) {
    return NO;
  }
  LocationResponse *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasSubscribe == otherMessage.hasSubscribe &&
      (!self.hasSubscribe || [self.subscribe isEqual:otherMessage.subscribe]) &&
      self.hasUnsubscribe == otherMessage.hasUnsubscribe &&
      (!self.hasUnsubscribe || [self.unsubscribe isEqual:otherMessage.unsubscribe]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasSubscribe) {
    hashCode = hashCode * 31 + [self.subscribe hash];
  }
  if (self.hasUnsubscribe) {
    hashCode = hashCode * 31 + [self.unsubscribe hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL LocationResponse_LocationResponseTypeIsValidValue(LocationResponse_LocationResponseType value) {
  switch (value) {
    case LocationResponse_LocationResponseTypeSubscribe:
    case LocationResponse_LocationResponseTypeUnsubscribe:
      return YES;
    default:
      return NO;
  }
}
@interface LocationResponse_Builder()
@property (strong) LocationResponse* result;
@end

@implementation LocationResponse_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[LocationResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (LocationResponse_Builder*) clear {
  self.result = [[LocationResponse alloc] init];
  return self;
}
- (LocationResponse_Builder*) clone {
  return [LocationResponse builderWithPrototype:result];
}
- (LocationResponse*) defaultInstance {
  return [LocationResponse defaultInstance];
}
- (LocationResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LocationResponse*) buildPartial {
  LocationResponse* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (LocationResponse_Builder*) mergeFrom:(LocationResponse*) other {
  if (other == [LocationResponse defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSubscribe) {
    [self mergeSubscribe:other.subscribe];
  }
  if (other.hasUnsubscribe) {
    [self mergeUnsubscribe:other.unsubscribe];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LocationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LocationResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (LocationResponse_LocationResponseTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        LocationSubscribe_Builder* subBuilder = [LocationSubscribe builder];
        if (self.hasSubscribe) {
          [subBuilder mergeFrom:self.subscribe];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSubscribe:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        LocationUnsubscribe_Builder* subBuilder = [LocationUnsubscribe builder];
        if (self.hasUnsubscribe) {
          [subBuilder mergeFrom:self.unsubscribe];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnsubscribe:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (LocationResponse_LocationResponseType) type {
  return result.type;
}
- (LocationResponse_Builder*) setType:(LocationResponse_LocationResponseType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (LocationResponse_Builder*) clearType {
  result.hasType = NO;
  result.type = LocationResponse_LocationResponseTypeSubscribe;
  return self;
}
- (BOOL) hasSubscribe {
  return result.hasSubscribe;
}
- (LocationSubscribe*) subscribe {
  return result.subscribe;
}
- (LocationResponse_Builder*) setSubscribe:(LocationSubscribe*) value {
  result.hasSubscribe = YES;
  result.subscribe = value;
  return self;
}
- (LocationResponse_Builder*) setSubscribeBuilder:(LocationSubscribe_Builder*) builderForValue {
  return [self setSubscribe:[builderForValue build]];
}
- (LocationResponse_Builder*) mergeSubscribe:(LocationSubscribe*) value {
  if (result.hasSubscribe &&
      result.subscribe != [LocationSubscribe defaultInstance]) {
    result.subscribe =
      [[[LocationSubscribe builderWithPrototype:result.subscribe] mergeFrom:value] buildPartial];
  } else {
    result.subscribe = value;
  }
  result.hasSubscribe = YES;
  return self;
}
- (LocationResponse_Builder*) clearSubscribe {
  result.hasSubscribe = NO;
  result.subscribe = [LocationSubscribe defaultInstance];
  return self;
}
- (BOOL) hasUnsubscribe {
  return result.hasUnsubscribe;
}
- (LocationUnsubscribe*) unsubscribe {
  return result.unsubscribe;
}
- (LocationResponse_Builder*) setUnsubscribe:(LocationUnsubscribe*) value {
  result.hasUnsubscribe = YES;
  result.unsubscribe = value;
  return self;
}
- (LocationResponse_Builder*) setUnsubscribeBuilder:(LocationUnsubscribe_Builder*) builderForValue {
  return [self setUnsubscribe:[builderForValue build]];
}
- (LocationResponse_Builder*) mergeUnsubscribe:(LocationUnsubscribe*) value {
  if (result.hasUnsubscribe &&
      result.unsubscribe != [LocationUnsubscribe defaultInstance]) {
    result.unsubscribe =
      [[[LocationUnsubscribe builderWithPrototype:result.unsubscribe] mergeFrom:value] buildPartial];
  } else {
    result.unsubscribe = value;
  }
  result.hasUnsubscribe = YES;
  return self;
}
- (LocationResponse_Builder*) clearUnsubscribe {
  result.hasUnsubscribe = NO;
  result.unsubscribe = [LocationUnsubscribe defaultInstance];
  return self;
}
@end

@interface AuthRequest ()
@property AuthRequest_AuthRequestType type;
@property (strong) NSString* username;
@property (strong) NSString* sessionToken;
@property (strong) NSString* password;
@property (strong) NSString* securityToken;
@end

@implementation AuthRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value_ {
  hasUsername_ = !!value_;
}
@synthesize username;
- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) value_ {
  hasSessionToken_ = !!value_;
}
@synthesize sessionToken;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (BOOL) hasSecurityToken {
  return !!hasSecurityToken_;
}
- (void) setHasSecurityToken:(BOOL) value_ {
  hasSecurityToken_ = !!value_;
}
@synthesize securityToken;
- (id) init {
  if ((self = [super init])) {
    self.type = AuthRequest_AuthRequestTypeSessionToken;
    self.username = @"";
    self.sessionToken = @"";
    self.password = @"";
    self.securityToken = @"";
  }
  return self;
}
static AuthRequest* defaultAuthRequestInstance = nil;
+ (void) initialize {
  if (self == [AuthRequest class]) {
    defaultAuthRequestInstance = [[AuthRequest alloc] init];
  }
}
+ (AuthRequest*) defaultInstance {
  return defaultAuthRequestInstance;
}
- (AuthRequest*) defaultInstance {
  return defaultAuthRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasUsername) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasUsername) {
    [output writeString:2 value:self.username];
  }
  if (self.hasSessionToken) {
    [output writeString:3 value:self.sessionToken];
  }
  if (self.hasPassword) {
    [output writeString:4 value:self.password];
  }
  if (self.hasSecurityToken) {
    [output writeString:5 value:self.securityToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasUsername) {
    size_ += computeStringSize(2, self.username);
  }
  if (self.hasSessionToken) {
    size_ += computeStringSize(3, self.sessionToken);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(4, self.password);
  }
  if (self.hasSecurityToken) {
    size_ += computeStringSize(5, self.securityToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AuthRequest*) parseFromData:(NSData*) data {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromData:data] build];
}
+ (AuthRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromInputStream:input] build];
}
+ (AuthRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AuthRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthRequest*)[[[AuthRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthRequest_Builder*) builder {
  return [[AuthRequest_Builder alloc] init];
}
+ (AuthRequest_Builder*) builderWithPrototype:(AuthRequest*) prototype {
  return [[AuthRequest builder] mergeFrom:prototype];
}
- (AuthRequest_Builder*) builder {
  return [AuthRequest builder];
}
- (AuthRequest_Builder*) toBuilder {
  return [AuthRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasSecurityToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"securityToken", self.securityToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasSecurityToken) {
    [dictionary setObject: self.securityToken forKey: @"securityToken"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AuthRequest class]]) {
    return NO;
  }
  AuthRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasSecurityToken == otherMessage.hasSecurityToken &&
      (!self.hasSecurityToken || [self.securityToken isEqual:otherMessage.securityToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasSecurityToken) {
    hashCode = hashCode * 31 + [self.securityToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL AuthRequest_AuthRequestTypeIsValidValue(AuthRequest_AuthRequestType value) {
  switch (value) {
    case AuthRequest_AuthRequestTypeSessionToken:
    case AuthRequest_AuthRequestTypeAuthentication:
      return YES;
    default:
      return NO;
  }
}
@interface AuthRequest_Builder()
@property (strong) AuthRequest* result;
@end

@implementation AuthRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[AuthRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AuthRequest_Builder*) clear {
  self.result = [[AuthRequest alloc] init];
  return self;
}
- (AuthRequest_Builder*) clone {
  return [AuthRequest builderWithPrototype:result];
}
- (AuthRequest*) defaultInstance {
  return [AuthRequest defaultInstance];
}
- (AuthRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthRequest*) buildPartial {
  AuthRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (AuthRequest_Builder*) mergeFrom:(AuthRequest*) other {
  if (other == [AuthRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasSecurityToken) {
    [self setSecurityToken:other.securityToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (AuthRequest_AuthRequestTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setUsername:[input readString]];
        break;
      }
      case 26: {
        [self setSessionToken:[input readString]];
        break;
      }
      case 34: {
        [self setPassword:[input readString]];
        break;
      }
      case 42: {
        [self setSecurityToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (AuthRequest_AuthRequestType) type {
  return result.type;
}
- (AuthRequest_Builder*) setType:(AuthRequest_AuthRequestType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (AuthRequest_Builder*) clearType {
  result.hasType = NO;
  result.type = AuthRequest_AuthRequestTypeSessionToken;
  return self;
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (AuthRequest_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (AuthRequest_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasSessionToken {
  return result.hasSessionToken;
}
- (NSString*) sessionToken {
  return result.sessionToken;
}
- (AuthRequest_Builder*) setSessionToken:(NSString*) value {
  result.hasSessionToken = YES;
  result.sessionToken = value;
  return self;
}
- (AuthRequest_Builder*) clearSessionToken {
  result.hasSessionToken = NO;
  result.sessionToken = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (AuthRequest_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (AuthRequest_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasSecurityToken {
  return result.hasSecurityToken;
}
- (NSString*) securityToken {
  return result.securityToken;
}
- (AuthRequest_Builder*) setSecurityToken:(NSString*) value {
  result.hasSecurityToken = YES;
  result.securityToken = value;
  return self;
}
- (AuthRequest_Builder*) clearSecurityToken {
  result.hasSecurityToken = NO;
  result.securityToken = @"";
  return self;
}
@end

@interface AuthResponse ()
@property AuthResponse_AuthResponseType type;
@property (strong) NSString* sessionToken;
@end

@implementation AuthResponse

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasSessionToken {
  return !!hasSessionToken_;
}
- (void) setHasSessionToken:(BOOL) value_ {
  hasSessionToken_ = !!value_;
}
@synthesize sessionToken;
- (id) init {
  if ((self = [super init])) {
    self.type = AuthResponse_AuthResponseTypeAuthOk;
    self.sessionToken = @"";
  }
  return self;
}
static AuthResponse* defaultAuthResponseInstance = nil;
+ (void) initialize {
  if (self == [AuthResponse class]) {
    defaultAuthResponseInstance = [[AuthResponse alloc] init];
  }
}
+ (AuthResponse*) defaultInstance {
  return defaultAuthResponseInstance;
}
- (AuthResponse*) defaultInstance {
  return defaultAuthResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasSessionToken) {
    [output writeString:2 value:self.sessionToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasSessionToken) {
    size_ += computeStringSize(2, self.sessionToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AuthResponse*) parseFromData:(NSData*) data {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromData:data] build];
}
+ (AuthResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthResponse*) parseFromInputStream:(NSInputStream*) input {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromInputStream:input] build];
}
+ (AuthResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromCodedInputStream:input] build];
}
+ (AuthResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthResponse*)[[[AuthResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthResponse_Builder*) builder {
  return [[AuthResponse_Builder alloc] init];
}
+ (AuthResponse_Builder*) builderWithPrototype:(AuthResponse*) prototype {
  return [[AuthResponse builder] mergeFrom:prototype];
}
- (AuthResponse_Builder*) builder {
  return [AuthResponse builder];
}
- (AuthResponse_Builder*) toBuilder {
  return [AuthResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasSessionToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionToken", self.sessionToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasSessionToken) {
    [dictionary setObject: self.sessionToken forKey: @"sessionToken"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AuthResponse class]]) {
    return NO;
  }
  AuthResponse *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasSessionToken == otherMessage.hasSessionToken &&
      (!self.hasSessionToken || [self.sessionToken isEqual:otherMessage.sessionToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasSessionToken) {
    hashCode = hashCode * 31 + [self.sessionToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL AuthResponse_AuthResponseTypeIsValidValue(AuthResponse_AuthResponseType value) {
  switch (value) {
    case AuthResponse_AuthResponseTypeAuthOk:
    case AuthResponse_AuthResponseTypeAuthFail:
    case AuthResponse_AuthResponseTypeSessionMaxTimeout:
    case AuthResponse_AuthResponseTypeSessionIdleTimeout:
      return YES;
    default:
      return NO;
  }
}
@interface AuthResponse_Builder()
@property (strong) AuthResponse* result;
@end

@implementation AuthResponse_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[AuthResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AuthResponse_Builder*) clear {
  self.result = [[AuthResponse alloc] init];
  return self;
}
- (AuthResponse_Builder*) clone {
  return [AuthResponse builderWithPrototype:result];
}
- (AuthResponse*) defaultInstance {
  return [AuthResponse defaultInstance];
}
- (AuthResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthResponse*) buildPartial {
  AuthResponse* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (AuthResponse_Builder*) mergeFrom:(AuthResponse*) other {
  if (other == [AuthResponse defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSessionToken) {
    [self setSessionToken:other.sessionToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (AuthResponse_AuthResponseTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setSessionToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (AuthResponse_AuthResponseType) type {
  return result.type;
}
- (AuthResponse_Builder*) setType:(AuthResponse_AuthResponseType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (AuthResponse_Builder*) clearType {
  result.hasType = NO;
  result.type = AuthResponse_AuthResponseTypeAuthOk;
  return self;
}
- (BOOL) hasSessionToken {
  return result.hasSessionToken;
}
- (NSString*) sessionToken {
  return result.sessionToken;
}
- (AuthResponse_Builder*) setSessionToken:(NSString*) value {
  result.hasSessionToken = YES;
  result.sessionToken = value;
  return self;
}
- (AuthResponse_Builder*) clearSessionToken {
  result.hasSessionToken = NO;
  result.sessionToken = @"";
  return self;
}
@end

@interface VideoRequest ()
@property (strong) NSString* ip;
@property int32_t port;
@property int32_t bitrate;
@end

@implementation VideoRequest

- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) value_ {
  hasIp_ = !!value_;
}
@synthesize ip;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) value_ {
  hasPort_ = !!value_;
}
@synthesize port;
- (BOOL) hasBitrate {
  return !!hasBitrate_;
}
- (void) setHasBitrate:(BOOL) value_ {
  hasBitrate_ = !!value_;
}
@synthesize bitrate;
- (id) init {
  if ((self = [super init])) {
    self.ip = @"";
    self.port = 0;
    self.bitrate = 0;
  }
  return self;
}
static VideoRequest* defaultVideoRequestInstance = nil;
+ (void) initialize {
  if (self == [VideoRequest class]) {
    defaultVideoRequestInstance = [[VideoRequest alloc] init];
  }
}
+ (VideoRequest*) defaultInstance {
  return defaultVideoRequestInstance;
}
- (VideoRequest*) defaultInstance {
  return defaultVideoRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasIp) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIp) {
    [output writeString:1 value:self.ip];
  }
  if (self.hasPort) {
    [output writeInt32:2 value:self.port];
  }
  if (self.hasBitrate) {
    [output writeInt32:3 value:self.bitrate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIp) {
    size_ += computeStringSize(1, self.ip);
  }
  if (self.hasPort) {
    size_ += computeInt32Size(2, self.port);
  }
  if (self.hasBitrate) {
    size_ += computeInt32Size(3, self.bitrate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoRequest*) parseFromData:(NSData*) data {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromData:data] build];
}
+ (VideoRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoRequest*) parseFromInputStream:(NSInputStream*) input {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromInputStream:input] build];
}
+ (VideoRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromCodedInputStream:input] build];
}
+ (VideoRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoRequest*)[[[VideoRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoRequest_Builder*) builder {
  return [[VideoRequest_Builder alloc] init];
}
+ (VideoRequest_Builder*) builderWithPrototype:(VideoRequest*) prototype {
  return [[VideoRequest builder] mergeFrom:prototype];
}
- (VideoRequest_Builder*) builder {
  return [VideoRequest builder];
}
- (VideoRequest_Builder*) toBuilder {
  return [VideoRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInt:self.port]];
  }
  if (self.hasBitrate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bitrate", [NSNumber numberWithInt:self.bitrate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInt:self.port] forKey: @"port"];
  }
  if (self.hasBitrate) {
    [dictionary setObject: [NSNumber numberWithInt:self.bitrate] forKey: @"bitrate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoRequest class]]) {
    return NO;
  }
  VideoRequest *otherMessage = other;
  return
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      self.hasBitrate == otherMessage.hasBitrate &&
      (!self.hasBitrate || self.bitrate == otherMessage.bitrate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.port] hash];
  }
  if (self.hasBitrate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bitrate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoRequest_Builder()
@property (strong) VideoRequest* result;
@end

@implementation VideoRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[VideoRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoRequest_Builder*) clear {
  self.result = [[VideoRequest alloc] init];
  return self;
}
- (VideoRequest_Builder*) clone {
  return [VideoRequest builderWithPrototype:result];
}
- (VideoRequest*) defaultInstance {
  return [VideoRequest defaultInstance];
}
- (VideoRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoRequest*) buildPartial {
  VideoRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (VideoRequest_Builder*) mergeFrom:(VideoRequest*) other {
  if (other == [VideoRequest defaultInstance]) {
    return self;
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  if (other.hasBitrate) {
    [self setBitrate:other.bitrate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIp:[input readString]];
        break;
      }
      case 16: {
        [self setPort:[input readInt32]];
        break;
      }
      case 24: {
        [self setBitrate:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasIp {
  return result.hasIp;
}
- (NSString*) ip {
  return result.ip;
}
- (VideoRequest_Builder*) setIp:(NSString*) value {
  result.hasIp = YES;
  result.ip = value;
  return self;
}
- (VideoRequest_Builder*) clearIp {
  result.hasIp = NO;
  result.ip = @"";
  return self;
}
- (BOOL) hasPort {
  return result.hasPort;
}
- (int32_t) port {
  return result.port;
}
- (VideoRequest_Builder*) setPort:(int32_t) value {
  result.hasPort = YES;
  result.port = value;
  return self;
}
- (VideoRequest_Builder*) clearPort {
  result.hasPort = NO;
  result.port = 0;
  return self;
}
- (BOOL) hasBitrate {
  return result.hasBitrate;
}
- (int32_t) bitrate {
  return result.bitrate;
}
- (VideoRequest_Builder*) setBitrate:(int32_t) value {
  result.hasBitrate = YES;
  result.bitrate = value;
  return self;
}
- (VideoRequest_Builder*) clearBitrate {
  result.hasBitrate = NO;
  result.bitrate = 0;
  return self;
}
@end

@interface WebRTCMessage ()
@property WebRTCMessage_WebRTCType type;
@property (strong) NSString* json;
@end

@implementation WebRTCMessage

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasJson {
  return !!hasJson_;
}
- (void) setHasJson:(BOOL) value_ {
  hasJson_ = !!value_;
}
@synthesize json;
- (id) init {
  if ((self = [super init])) {
    self.type = WebRTCMessage_WebRTCTypeOffer;
    self.json = @"";
  }
  return self;
}
static WebRTCMessage* defaultWebRTCMessageInstance = nil;
+ (void) initialize {
  if (self == [WebRTCMessage class]) {
    defaultWebRTCMessageInstance = [[WebRTCMessage alloc] init];
  }
}
+ (WebRTCMessage*) defaultInstance {
  return defaultWebRTCMessageInstance;
}
- (WebRTCMessage*) defaultInstance {
  return defaultWebRTCMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasJson) {
    [output writeString:2 value:self.json];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasJson) {
    size_ += computeStringSize(2, self.json);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WebRTCMessage*) parseFromData:(NSData*) data {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromData:data] build];
}
+ (WebRTCMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebRTCMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromInputStream:input] build];
}
+ (WebRTCMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebRTCMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WebRTCMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebRTCMessage*)[[[WebRTCMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebRTCMessage_Builder*) builder {
  return [[WebRTCMessage_Builder alloc] init];
}
+ (WebRTCMessage_Builder*) builderWithPrototype:(WebRTCMessage*) prototype {
  return [[WebRTCMessage builder] mergeFrom:prototype];
}
- (WebRTCMessage_Builder*) builder {
  return [WebRTCMessage builder];
}
- (WebRTCMessage_Builder*) toBuilder {
  return [WebRTCMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasJson) {
    [output appendFormat:@"%@%@: %@\n", indent, @"json", self.json];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasJson) {
    [dictionary setObject: self.json forKey: @"json"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[WebRTCMessage class]]) {
    return NO;
  }
  WebRTCMessage *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasJson == otherMessage.hasJson &&
      (!self.hasJson || [self.json isEqual:otherMessage.json]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasJson) {
    hashCode = hashCode * 31 + [self.json hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL WebRTCMessage_WebRTCTypeIsValidValue(WebRTCMessage_WebRTCType value) {
  switch (value) {
    case WebRTCMessage_WebRTCTypeOffer:
    case WebRTCMessage_WebRTCTypeAnswer:
    case WebRTCMessage_WebRTCTypeCandidate:
    case WebRTCMessage_WebRTCTypeBye:
      return YES;
    default:
      return NO;
  }
}
@interface WebRTCMessage_Builder()
@property (strong) WebRTCMessage* result;
@end

@implementation WebRTCMessage_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[WebRTCMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WebRTCMessage_Builder*) clear {
  self.result = [[WebRTCMessage alloc] init];
  return self;
}
- (WebRTCMessage_Builder*) clone {
  return [WebRTCMessage builderWithPrototype:result];
}
- (WebRTCMessage*) defaultInstance {
  return [WebRTCMessage defaultInstance];
}
- (WebRTCMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebRTCMessage*) buildPartial {
  WebRTCMessage* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (WebRTCMessage_Builder*) mergeFrom:(WebRTCMessage*) other {
  if (other == [WebRTCMessage defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasJson) {
    [self setJson:other.json];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebRTCMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebRTCMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (WebRTCMessage_WebRTCTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setJson:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (WebRTCMessage_WebRTCType) type {
  return result.type;
}
- (WebRTCMessage_Builder*) setType:(WebRTCMessage_WebRTCType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (WebRTCMessage_Builder*) clearType {
  result.hasType = NO;
  result.type = WebRTCMessage_WebRTCTypeOffer;
  return self;
}
- (BOOL) hasJson {
  return result.hasJson;
}
- (NSString*) json {
  return result.json;
}
- (WebRTCMessage_Builder*) setJson:(NSString*) value {
  result.hasJson = YES;
  result.json = value;
  return self;
}
- (WebRTCMessage_Builder*) clearJson {
  result.hasJson = NO;
  result.json = @"";
  return self;
}
@end

@interface VideoStreamInfo ()
@property (strong) NSString* iceServers;
@property (strong) NSString* pcConstraints;
@property (strong) NSString* videoConstraints;
@end

@implementation VideoStreamInfo

- (BOOL) hasIceServers {
  return !!hasIceServers_;
}
- (void) setHasIceServers:(BOOL) value_ {
  hasIceServers_ = !!value_;
}
@synthesize iceServers;
- (BOOL) hasPcConstraints {
  return !!hasPcConstraints_;
}
- (void) setHasPcConstraints:(BOOL) value_ {
  hasPcConstraints_ = !!value_;
}
@synthesize pcConstraints;
- (BOOL) hasVideoConstraints {
  return !!hasVideoConstraints_;
}
- (void) setHasVideoConstraints:(BOOL) value_ {
  hasVideoConstraints_ = !!value_;
}
@synthesize videoConstraints;
- (id) init {
  if ((self = [super init])) {
    self.iceServers = @"";
    self.pcConstraints = @"";
    self.videoConstraints = @"";
  }
  return self;
}
static VideoStreamInfo* defaultVideoStreamInfoInstance = nil;
+ (void) initialize {
  if (self == [VideoStreamInfo class]) {
    defaultVideoStreamInfoInstance = [[VideoStreamInfo alloc] init];
  }
}
+ (VideoStreamInfo*) defaultInstance {
  return defaultVideoStreamInfoInstance;
}
- (VideoStreamInfo*) defaultInstance {
  return defaultVideoStreamInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIceServers) {
    [output writeString:1 value:self.iceServers];
  }
  if (self.hasPcConstraints) {
    [output writeString:2 value:self.pcConstraints];
  }
  if (self.hasVideoConstraints) {
    [output writeString:3 value:self.videoConstraints];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIceServers) {
    size_ += computeStringSize(1, self.iceServers);
  }
  if (self.hasPcConstraints) {
    size_ += computeStringSize(2, self.pcConstraints);
  }
  if (self.hasVideoConstraints) {
    size_ += computeStringSize(3, self.videoConstraints);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VideoStreamInfo*) parseFromData:(NSData*) data {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromData:data] build];
}
+ (VideoStreamInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VideoStreamInfo*) parseFromInputStream:(NSInputStream*) input {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromInputStream:input] build];
}
+ (VideoStreamInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoStreamInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromCodedInputStream:input] build];
}
+ (VideoStreamInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VideoStreamInfo*)[[[VideoStreamInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VideoStreamInfo_Builder*) builder {
  return [[VideoStreamInfo_Builder alloc] init];
}
+ (VideoStreamInfo_Builder*) builderWithPrototype:(VideoStreamInfo*) prototype {
  return [[VideoStreamInfo builder] mergeFrom:prototype];
}
- (VideoStreamInfo_Builder*) builder {
  return [VideoStreamInfo builder];
}
- (VideoStreamInfo_Builder*) toBuilder {
  return [VideoStreamInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIceServers) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iceServers", self.iceServers];
  }
  if (self.hasPcConstraints) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pcConstraints", self.pcConstraints];
  }
  if (self.hasVideoConstraints) {
    [output appendFormat:@"%@%@: %@\n", indent, @"videoConstraints", self.videoConstraints];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIceServers) {
    [dictionary setObject: self.iceServers forKey: @"iceServers"];
  }
  if (self.hasPcConstraints) {
    [dictionary setObject: self.pcConstraints forKey: @"pcConstraints"];
  }
  if (self.hasVideoConstraints) {
    [dictionary setObject: self.videoConstraints forKey: @"videoConstraints"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VideoStreamInfo class]]) {
    return NO;
  }
  VideoStreamInfo *otherMessage = other;
  return
      self.hasIceServers == otherMessage.hasIceServers &&
      (!self.hasIceServers || [self.iceServers isEqual:otherMessage.iceServers]) &&
      self.hasPcConstraints == otherMessage.hasPcConstraints &&
      (!self.hasPcConstraints || [self.pcConstraints isEqual:otherMessage.pcConstraints]) &&
      self.hasVideoConstraints == otherMessage.hasVideoConstraints &&
      (!self.hasVideoConstraints || [self.videoConstraints isEqual:otherMessage.videoConstraints]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasIceServers) {
    hashCode = hashCode * 31 + [self.iceServers hash];
  }
  if (self.hasPcConstraints) {
    hashCode = hashCode * 31 + [self.pcConstraints hash];
  }
  if (self.hasVideoConstraints) {
    hashCode = hashCode * 31 + [self.videoConstraints hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VideoStreamInfo_Builder()
@property (strong) VideoStreamInfo* result;
@end

@implementation VideoStreamInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[VideoStreamInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (VideoStreamInfo_Builder*) clear {
  self.result = [[VideoStreamInfo alloc] init];
  return self;
}
- (VideoStreamInfo_Builder*) clone {
  return [VideoStreamInfo builderWithPrototype:result];
}
- (VideoStreamInfo*) defaultInstance {
  return [VideoStreamInfo defaultInstance];
}
- (VideoStreamInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VideoStreamInfo*) buildPartial {
  VideoStreamInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (VideoStreamInfo_Builder*) mergeFrom:(VideoStreamInfo*) other {
  if (other == [VideoStreamInfo defaultInstance]) {
    return self;
  }
  if (other.hasIceServers) {
    [self setIceServers:other.iceServers];
  }
  if (other.hasPcConstraints) {
    [self setPcConstraints:other.pcConstraints];
  }
  if (other.hasVideoConstraints) {
    [self setVideoConstraints:other.videoConstraints];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VideoStreamInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VideoStreamInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIceServers:[input readString]];
        break;
      }
      case 18: {
        [self setPcConstraints:[input readString]];
        break;
      }
      case 26: {
        [self setVideoConstraints:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIceServers {
  return result.hasIceServers;
}
- (NSString*) iceServers {
  return result.iceServers;
}
- (VideoStreamInfo_Builder*) setIceServers:(NSString*) value {
  result.hasIceServers = YES;
  result.iceServers = value;
  return self;
}
- (VideoStreamInfo_Builder*) clearIceServers {
  result.hasIceServers = NO;
  result.iceServers = @"";
  return self;
}
- (BOOL) hasPcConstraints {
  return result.hasPcConstraints;
}
- (NSString*) pcConstraints {
  return result.pcConstraints;
}
- (VideoStreamInfo_Builder*) setPcConstraints:(NSString*) value {
  result.hasPcConstraints = YES;
  result.pcConstraints = value;
  return self;
}
- (VideoStreamInfo_Builder*) clearPcConstraints {
  result.hasPcConstraints = NO;
  result.pcConstraints = @"";
  return self;
}
- (BOOL) hasVideoConstraints {
  return result.hasVideoConstraints;
}
- (NSString*) videoConstraints {
  return result.videoConstraints;
}
- (VideoStreamInfo_Builder*) setVideoConstraints:(NSString*) value {
  result.hasVideoConstraints = YES;
  result.videoConstraints = value;
  return self;
}
- (VideoStreamInfo_Builder*) clearVideoConstraints {
  result.hasVideoConstraints = NO;
  result.videoConstraints = @"";
  return self;
}
@end

@interface RotationInfo ()
@property int32_t rotation;
@end

@implementation RotationInfo

- (BOOL) hasRotation {
  return !!hasRotation_;
}
- (void) setHasRotation:(BOOL) value_ {
  hasRotation_ = !!value_;
}
@synthesize rotation;
- (id) init {
  if ((self = [super init])) {
    self.rotation = 0;
  }
  return self;
}
static RotationInfo* defaultRotationInfoInstance = nil;
+ (void) initialize {
  if (self == [RotationInfo class]) {
    defaultRotationInfoInstance = [[RotationInfo alloc] init];
  }
}
+ (RotationInfo*) defaultInstance {
  return defaultRotationInfoInstance;
}
- (RotationInfo*) defaultInstance {
  return defaultRotationInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRotation) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRotation) {
    [output writeInt32:1 value:self.rotation];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRotation) {
    size_ += computeInt32Size(1, self.rotation);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RotationInfo*) parseFromData:(NSData*) data {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromData:data] build];
}
+ (RotationInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RotationInfo*) parseFromInputStream:(NSInputStream*) input {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromInputStream:input] build];
}
+ (RotationInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RotationInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromCodedInputStream:input] build];
}
+ (RotationInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RotationInfo*)[[[RotationInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RotationInfo_Builder*) builder {
  return [[RotationInfo_Builder alloc] init];
}
+ (RotationInfo_Builder*) builderWithPrototype:(RotationInfo*) prototype {
  return [[RotationInfo builder] mergeFrom:prototype];
}
- (RotationInfo_Builder*) builder {
  return [RotationInfo builder];
}
- (RotationInfo_Builder*) toBuilder {
  return [RotationInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRotation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rotation", [NSNumber numberWithInt:self.rotation]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRotation) {
    [dictionary setObject: [NSNumber numberWithInt:self.rotation] forKey: @"rotation"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RotationInfo class]]) {
    return NO;
  }
  RotationInfo *otherMessage = other;
  return
      self.hasRotation == otherMessage.hasRotation &&
      (!self.hasRotation || self.rotation == otherMessage.rotation) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasRotation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.rotation] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RotationInfo_Builder()
@property (strong) RotationInfo* result;
@end

@implementation RotationInfo_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RotationInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RotationInfo_Builder*) clear {
  self.result = [[RotationInfo alloc] init];
  return self;
}
- (RotationInfo_Builder*) clone {
  return [RotationInfo builderWithPrototype:result];
}
- (RotationInfo*) defaultInstance {
  return [RotationInfo defaultInstance];
}
- (RotationInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RotationInfo*) buildPartial {
  RotationInfo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RotationInfo_Builder*) mergeFrom:(RotationInfo*) other {
  if (other == [RotationInfo defaultInstance]) {
    return self;
  }
  if (other.hasRotation) {
    [self setRotation:other.rotation];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RotationInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RotationInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRotation:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRotation {
  return result.hasRotation;
}
- (int32_t) rotation {
  return result.rotation;
}
- (RotationInfo_Builder*) setRotation:(int32_t) value {
  result.hasRotation = YES;
  result.rotation = value;
  return self;
}
- (RotationInfo_Builder*) clearRotation {
  result.hasRotation = NO;
  result.rotation = 0;
  return self;
}
@end

@interface Ping ()
@property int64_t startDate;
@end

@implementation Ping

- (BOOL) hasStartDate {
  return !!hasStartDate_;
}
- (void) setHasStartDate:(BOOL) value_ {
  hasStartDate_ = !!value_;
}
@synthesize startDate;
- (id) init {
  if ((self = [super init])) {
    self.startDate = 0L;
  }
  return self;
}
static Ping* defaultPingInstance = nil;
+ (void) initialize {
  if (self == [Ping class]) {
    defaultPingInstance = [[Ping alloc] init];
  }
}
+ (Ping*) defaultInstance {
  return defaultPingInstance;
}
- (Ping*) defaultInstance {
  return defaultPingInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStartDate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStartDate) {
    [output writeInt64:1 value:self.startDate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStartDate) {
    size_ += computeInt64Size(1, self.startDate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Ping*) parseFromData:(NSData*) data {
  return (Ping*)[[[Ping builder] mergeFromData:data] build];
}
+ (Ping*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Ping*) parseFromInputStream:(NSInputStream*) input {
  return (Ping*)[[[Ping builder] mergeFromInputStream:input] build];
}
+ (Ping*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Ping*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Ping*)[[[Ping builder] mergeFromCodedInputStream:input] build];
}
+ (Ping*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Ping_Builder*) builder {
  return [[Ping_Builder alloc] init];
}
+ (Ping_Builder*) builderWithPrototype:(Ping*) prototype {
  return [[Ping builder] mergeFrom:prototype];
}
- (Ping_Builder*) builder {
  return [Ping builder];
}
- (Ping_Builder*) toBuilder {
  return [Ping builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStartDate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startDate", [NSNumber numberWithLongLong:self.startDate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStartDate) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.startDate] forKey: @"startDate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Ping class]]) {
    return NO;
  }
  Ping *otherMessage = other;
  return
      self.hasStartDate == otherMessage.hasStartDate &&
      (!self.hasStartDate || self.startDate == otherMessage.startDate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasStartDate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startDate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Ping_Builder()
@property (strong) Ping* result;
@end

@implementation Ping_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Ping alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Ping_Builder*) clear {
  self.result = [[Ping alloc] init];
  return self;
}
- (Ping_Builder*) clone {
  return [Ping builderWithPrototype:result];
}
- (Ping*) defaultInstance {
  return [Ping defaultInstance];
}
- (Ping*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Ping*) buildPartial {
  Ping* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Ping_Builder*) mergeFrom:(Ping*) other {
  if (other == [Ping defaultInstance]) {
    return self;
  }
  if (other.hasStartDate) {
    [self setStartDate:other.startDate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Ping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Ping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStartDate:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasStartDate {
  return result.hasStartDate;
}
- (int64_t) startDate {
  return result.startDate;
}
- (Ping_Builder*) setStartDate:(int64_t) value {
  result.hasStartDate = YES;
  result.startDate = value;
  return self;
}
- (Ping_Builder*) clearStartDate {
  result.hasStartDate = NO;
  result.startDate = 0L;
  return self;
}
@end

